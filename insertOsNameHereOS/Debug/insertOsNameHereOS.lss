
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000007b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1b  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b02  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000979  00000000  00000000  000022a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000662  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000432  00000000  00000000  0000345a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_3>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_27>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_42>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 82 02 	call	0x504	; 0x504 <main>
  c4:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <os>:


 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  cc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  ce:	08 95       	ret

000000d0 <yield>:

.global yield
yield:
  JMP yield ; Spin.  This should do something more usefull later
  d0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <yield>

000000d4 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the registers
	IN R1, _SFR_IO_ADDR(SREG); R1 is zero and doesnt need to be saved 
  d4:	1f b6       	in	r1, 0x3f	; 63
	PUSH R31
  d6:	ff 93       	push	r31
	PUSH R30
  d8:	ef 93       	push	r30
	PUSH R29
  da:	df 93       	push	r29
	PUSH R28
  dc:	cf 93       	push	r28
	PUSH R27
  de:	bf 93       	push	r27
	PUSH R26
  e0:	af 93       	push	r26
	PUSH R25
  e2:	9f 93       	push	r25
	PUSH R24
  e4:	8f 93       	push	r24
	PUSH R23
  e6:	7f 93       	push	r23
	PUSH R22
  e8:	6f 93       	push	r22
	PUSH R21
  ea:	5f 93       	push	r21
	PUSH R20
  ec:	4f 93       	push	r20
	PUSH R19
  ee:	3f 93       	push	r19
	PUSH R18
  f0:	2f 93       	push	r18
	PUSH R17
  f2:	1f 93       	push	r17
	PUSH R16
  f4:	0f 93       	push	r16
	PUSH R15
  f6:	ff 92       	push	r15
	PUSH R14
  f8:	ef 92       	push	r14
	PUSH R13
  fa:	df 92       	push	r13
	PUSH R12
  fc:	cf 92       	push	r12
	PUSH R11
  fe:	bf 92       	push	r11
	PUSH R10
 100:	af 92       	push	r10
	PUSH R9
 102:	9f 92       	push	r9
	PUSH R8
 104:	8f 92       	push	r8
	PUSH R7
 106:	7f 92       	push	r7
	PUSH R6
 108:	6f 92       	push	r6
	PUSH R5
 10a:	5f 92       	push	r5
	PUSH R4
 10c:	4f 92       	push	r4
	PUSH R3
 10e:	3f 92       	push	r3
	PUSH R2
 110:	2f 92       	push	r2
	PUSH R1
 112:	1f 92       	push	r1
	PUSH R0
 114:	0f 92       	push	r0

  ; get the Task Counter into R17 and number of tasks into R18
    LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register
 116:	e0 e0       	ldi	r30, 0x00	; 0
    LDI ZH, TASKCOUNTERADDR_H
 118:	f4 e0       	ldi	r31, 0x04	; 4
    LD R17, Z+; get task counter
 11a:	11 91       	ld	r17, Z+
    LD R18, Z; get number of tasks
 11c:	20 81       	ld	r18, Z

  ; get the stack pointer
    IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
 11e:	ed b7       	in	r30, 0x3d	; 61
    IN ZH, _SFR_IO_ADDR(SPH);
 120:	fe b7       	in	r31, 0x3e	; 62
    PUSH ZH; save the stack pointer
 122:	ff 93       	push	r31
    PUSH ZL
 124:	ef 93       	push	r30


  ; calculate address of current task structure
    LDI R16, 16
 126:	00 e1       	ldi	r16, 0x10	; 16
    MUL R17, R16; multiply task counter by 16 and put the result in R0
 128:	10 9f       	mul	r17, r16
    LDI ZL, STARTOFTASKLIST_L + 8; stack pointer address in task list
 12a:	e8 e0       	ldi	r30, 0x08	; 8
    LDI ZH, STARTOFTASKLIST_H
 12c:	f1 e0       	ldi	r31, 0x01	; 1
    ; task counter to offset
    ADD ZL, R0;
 12e:	e0 0d       	add	r30, r0
    ADC ZH, R1; does a 16bit add correct address now in Z register
 130:	f1 1d       	adc	r31, r1

  ; save stack pointer and program counter to task structure memeory
    POP R0; low byte of SP
 132:	0f 90       	pop	r0
	POP R1; high byte of SP 
 134:	1f 90       	pop	r1
    ST Z+, R0
 136:	01 92       	st	Z+, r0
    ST Z+, R1
 138:	11 92       	st	Z+, r1

  call incrementTask
 13a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <incrementTask>
;   INC R17; increment task counter
;  CP R17, R18
;  BRLO TaskNotOverflowed ; brach if lower
;  CLR R17; if taskCounter >= numberOfTasks reset to task 0
;  TaskNotOverflowed:
  LDI ZL, TASKCOUNTERADDR_L
 13e:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H
 140:	f4 e0       	ldi	r31, 0x04	; 4
  LD R17, Z
 142:	10 81       	ld	r17, Z

00000144 <LOADSTATE>:
  ; its not its part of the ISR but this should magically fix things 
  .global LOADSTATE
  LOADSTATE:
  ; Load saved state
    ; get saved SP
      LDI R16, 16
 144:	00 e1       	ldi	r16, 0x10	; 16
      MUL R17, R16; multiply task counter by 16 and put the result in R0
 146:	10 9f       	mul	r17, r16
      LDI ZL, STARTOFTASKLIST_L + 8; program counter address in task list
 148:	e8 e0       	ldi	r30, 0x08	; 8
      LDI ZH, STARTOFTASKLIST_H
 14a:	f1 e0       	ldi	r31, 0x01	; 1
      ; task counter to offset
      ADD ZL, R0;
 14c:	e0 0d       	add	r30, r0
      ADC ZH, R1; does a 16bit add correct address now in Z register
 14e:	f1 1d       	adc	r31, r1
      LD R0, Z+; SPL
 150:	01 90       	ld	r0, Z+
      PUSH R0
 152:	0f 92       	push	r0
      LD R0, Z; SPH
 154:	00 80       	ld	r0, Z
      PUSH R0
 156:	0f 92       	push	r0


    ; restore stack pointer 
      POP R1; SPH
 158:	1f 90       	pop	r1
      POP R0; SPL
 15a:	0f 90       	pop	r0
      OUT _SFR_IO_ADDR(SPH), R1
 15c:	1e be       	out	0x3e, r1	; 62
      OUT _SFR_IO_ADDR(SPL), R0
 15e:	0d be       	out	0x3d, r0	; 61
      

	POP R0
 160:	0f 90       	pop	r0
	POP R1
 162:	1f 90       	pop	r1
	OUT _SFR_IO_ADDR(SREG), R1; put the Status register back 
 164:	1f be       	out	0x3f, r1	; 63
	POP R2
 166:	2f 90       	pop	r2
	POP R3
 168:	3f 90       	pop	r3
	POP R4
 16a:	4f 90       	pop	r4
	POP R5
 16c:	5f 90       	pop	r5
	POP R6
 16e:	6f 90       	pop	r6
	POP R7
 170:	7f 90       	pop	r7
	POP R8
 172:	8f 90       	pop	r8
	POP R9
 174:	9f 90       	pop	r9
	POP R10
 176:	af 90       	pop	r10
	POP R11
 178:	bf 90       	pop	r11
	POP R12
 17a:	cf 90       	pop	r12
	POP R13
 17c:	df 90       	pop	r13
	POP R14
 17e:	ef 90       	pop	r14
	POP R15
 180:	ff 90       	pop	r15
	POP R16
 182:	0f 91       	pop	r16
	POP R17
 184:	1f 91       	pop	r17
	POP R18
 186:	2f 91       	pop	r18
	POP R19
 188:	3f 91       	pop	r19
	POP R20
 18a:	4f 91       	pop	r20
	POP R21
 18c:	5f 91       	pop	r21
	POP R22
 18e:	6f 91       	pop	r22
	POP R23
 190:	7f 91       	pop	r23
	POP R24
 192:	8f 91       	pop	r24
	POP R25
 194:	9f 91       	pop	r25
	POP R26
 196:	af 91       	pop	r26
	POP R27
 198:	bf 91       	pop	r27
	POP R28
 19a:	cf 91       	pop	r28
	POP R29
 19c:	df 91       	pop	r29
	POP R30
 19e:	ef 91       	pop	r30
	POP R31
 1a0:	ff 91       	pop	r31
	CLR R1
 1a2:	11 24       	eor	r1, r1
    ; PC shoudld be on stack

  reti
 1a4:	18 95       	reti

000001a6 <taskScheduler>:
}

void killTask(uint8_t taskId){
	// verify its a real task and not the os
	if(taskId >= numberOfTasks || taskId == 0) return;
	taskArray[taskId].taskFunction = NULL;
 1a6:	f8 94       	cli
 1a8:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 1ac:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 1b0:	80 31       	cpi	r24, 0x10	; 16
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <taskScheduler+0x10>
 1b4:	52 c0       	rjmp	.+164    	; 0x25a <taskScheduler+0xb4>
 1b6:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	e8 9f       	mul	r30, r24
 1be:	f0 01       	movw	r30, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	86 81       	ldd	r24, Z+6	; 0x06
 1c8:	97 81       	ldd	r25, Z+7	; 0x07
 1ca:	02 97       	sbiw	r24, 0x02	; 2
 1cc:	e1 f5       	brne	.+120    	; 0x246 <taskScheduler+0xa0>
 1ce:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <_end+0x303>
 1d2:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <_end+0x304>
 1d6:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <_end+0x305>
 1da:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 1de:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <_end+0x307>
 1e2:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <_end+0x308>
 1e6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_end+0x309>
 1ea:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 1ee:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 1f2:	a0 e1       	ldi	r26, 0x10	; 16
 1f4:	ea 9f       	mul	r30, r26
 1f6:	f0 01       	movw	r30, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	04 85       	ldd	r16, Z+12	; 0x0c
 200:	15 85       	ldd	r17, Z+13	; 0x0d
 202:	0e 94 38 03 	call	0x670	; 0x670 <__lshrdi3>
 206:	21 70       	andi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__cmpdi2_s8>
 21c:	a1 f0       	breq	.+40     	; 0x246 <taskScheduler+0xa0>
 21e:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 222:	80 e1       	ldi	r24, 0x10	; 16
 224:	e8 9f       	mul	r30, r24
 226:	f0 01       	movw	r30, r0
 228:	11 24       	eor	r1, r1
 22a:	e0 50       	subi	r30, 0x00	; 0
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	15 86       	std	Z+13, r1	; 0x0d
 230:	14 86       	std	Z+12, r1	; 0x0c
 232:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 236:	a0 e1       	ldi	r26, 0x10	; 16
 238:	ea 9f       	mul	r30, r26
 23a:	f0 01       	movw	r30, r0
 23c:	11 24       	eor	r1, r1
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	17 82       	std	Z+7, r1	; 0x07
 244:	16 82       	std	Z+6, r1	; 0x06
 246:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 250:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 254:	80 31       	cpi	r24, 0x10	; 16
 256:	08 f4       	brcc	.+2      	; 0x25a <taskScheduler+0xb4>
 258:	ae cf       	rjmp	.-164    	; 0x1b6 <taskScheduler+0x10>
 25a:	78 94       	sei
 25c:	a4 cf       	rjmp	.-184    	; 0x1a6 <taskScheduler>

0000025e <blinkyTaskFunction>:
 25e:	2d 9a       	sbi	0x05, 5	; 5
 260:	fe cf       	rjmp	.-4      	; 0x25e <blinkyTaskFunction>

00000262 <blinkyTask2Function>:
 262:	2d 98       	cbi	0x05, 5	; 5
 264:	fe cf       	rjmp	.-4      	; 0x262 <blinkyTask2Function>

00000266 <digitA>:
 266:	97 e7       	ldi	r25, 0x77	; 119
 268:	73 98       	cbi	0x0e, 3	; 14
 26a:	43 98       	cbi	0x08, 3	; 8
 26c:	9b b9       	out	0x0b, r25	; 11
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	85 b9       	out	0x05, r24	; 5
 274:	28 9a       	sbi	0x05, 0	; 5
 276:	f8 cf       	rjmp	.-16     	; 0x268 <digitA+0x2>

00000278 <digitB>:
 278:	9c e7       	ldi	r25, 0x7C	; 124
 27a:	43 98       	cbi	0x08, 3	; 8
 27c:	9b b9       	out	0x0b, r25	; 11
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	85 b9       	out	0x05, r24	; 5
 284:	29 9a       	sbi	0x05, 1	; 5
 286:	f9 cf       	rjmp	.-14     	; 0x27a <digitB+0x2>

00000288 <digitC>:
 288:	98 e5       	ldi	r25, 0x58	; 88
 28a:	43 98       	cbi	0x08, 3	; 8
 28c:	9b b9       	out	0x0b, r25	; 11
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	80 7f       	andi	r24, 0xF0	; 240
 292:	85 b9       	out	0x05, r24	; 5
 294:	2a 9a       	sbi	0x05, 2	; 5
 296:	f9 cf       	rjmp	.-14     	; 0x28a <digitC+0x2>

00000298 <digitD>:
 298:	9e e5       	ldi	r25, 0x5E	; 94
 29a:	43 98       	cbi	0x08, 3	; 8
 29c:	9b b9       	out	0x0b, r25	; 11
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	80 7f       	andi	r24, 0xF0	; 240
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	2b 9a       	sbi	0x05, 3	; 5
 2a6:	f9 cf       	rjmp	.-14     	; 0x29a <digitD+0x2>

000002a8 <semiphoreSetup>:
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 2b4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2b8:	08 95       	ret

000002ba <__vector_3>:
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	18 9b       	sbis	0x03, 0	; 3
 2d6:	22 c0       	rjmp	.+68     	; 0x31c <__vector_3+0x62>
 2d8:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_end+0x303>
 2dc:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <_end+0x304>
 2e0:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_end+0x305>
 2e4:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 2e8:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <_end+0x307>
 2ec:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_end+0x308>
 2f0:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_end+0x309>
 2f4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_end+0x303>
 2fe:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <_end+0x304>
 302:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <_end+0x305>
 306:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <_end+0x306>
 30a:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <_end+0x307>
 30e:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <_end+0x308>
 312:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <_end+0x309>
 316:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_end+0x30a>
 31a:	10 c0       	rjmp	.+32     	; 0x33c <__vector_3+0x82>
 31c:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 320:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 324:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 328:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 32c:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 330:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 334:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 338:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_27>:
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	60 99       	sbic	0x0c, 0	; 12
 372:	22 c0       	rjmp	.+68     	; 0x3b8 <__vector_27+0x62>
 374:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_end+0x303>
 378:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <_end+0x304>
 37c:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_end+0x305>
 380:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 384:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <_end+0x307>
 388:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_end+0x308>
 38c:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_end+0x309>
 390:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 394:	80 61       	ori	r24, 0x10	; 16
 396:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_end+0x303>
 39a:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <_end+0x304>
 39e:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <_end+0x305>
 3a2:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <_end+0x306>
 3a6:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <_end+0x307>
 3aa:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <_end+0x308>
 3ae:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <_end+0x309>
 3b2:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_end+0x30a>
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <__vector_27+0x82>
 3b8:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 3bc:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 3c0:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 3c4:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 3c8:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 3cc:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 3d0:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 3d4:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	5f 91       	pop	r21
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <clrRam>:
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	11 92       	st	Z+, r1
 3f8:	11 92       	st	Z+, r1
 3fa:	e1 15       	cp	r30, r1
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	f8 07       	cpc	r31, r24
 400:	d1 f7       	brne	.-12     	; 0x3f6 <clrRam+0x4>
 402:	08 95       	ret

00000404 <tickTimerSetup>:
 404:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 40e:	88 ec       	ldi	r24, 0xC8	; 200
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 416:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 420:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 424:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 428:	08 95       	ret

0000042a <createTask>:
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	60 97       	sbiw	r28, 0x10	; 16
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	e0 e0       	ldi	r30, 0x00	; 0
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	de 01       	movw	r26, r28
 446:	11 96       	adiw	r26, 0x01	; 1
 448:	01 90       	ld	r0, Z+
 44a:	0d 92       	st	X+, r0
 44c:	2a 95       	dec	r18
 44e:	e1 f7       	brne	.-8      	; 0x448 <createTask+0x1e>
 450:	2b 81       	ldd	r18, Y+3	; 0x03
 452:	3c 81       	ldd	r19, Y+4	; 0x04
 454:	23 2b       	or	r18, r19
 456:	99 f0       	breq	.+38     	; 0x47e <createTask+0x54>
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	30 e1       	ldi	r19, 0x10	; 16
 45e:	23 9f       	mul	r18, r19
 460:	f0 01       	movw	r30, r0
 462:	11 24       	eor	r1, r1
 464:	e0 50       	subi	r30, 0x00	; 0
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	30 e1       	ldi	r19, 0x10	; 16
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	3a 95       	dec	r19
 474:	e1 f7       	brne	.-8      	; 0x46e <createTask+0x44>
 476:	4b 81       	ldd	r20, Y+3	; 0x03
 478:	5c 81       	ldd	r21, Y+4	; 0x04
 47a:	45 2b       	or	r20, r21
 47c:	71 f7       	brne	.-36     	; 0x45a <createTask+0x30>
 47e:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <_end+0x301>
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	ab 01       	movw	r20, r22
 486:	00 24       	eor	r0, r0
 488:	56 95       	lsr	r21
 48a:	47 95       	ror	r20
 48c:	07 94       	ror	r0
 48e:	56 95       	lsr	r21
 490:	47 95       	ror	r20
 492:	07 94       	ror	r0
 494:	54 2f       	mov	r21, r20
 496:	40 2d       	mov	r20, r0
 498:	fa 01       	movw	r30, r20
 49a:	e2 5c       	subi	r30, 0xC2	; 194
 49c:	fb 4f       	sbci	r31, 0xFB	; 251
 49e:	90 83       	st	Z, r25
 4a0:	81 83       	std	Z+1, r24	; 0x01
 4a2:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_end+0x301>
 4a6:	7a 83       	std	Y+2, r23	; 0x02
 4a8:	69 83       	std	Y+1, r22	; 0x01
 4aa:	8b 83       	std	Y+3, r24	; 0x03
 4ac:	9c 83       	std	Y+4, r25	; 0x04
 4ae:	6b eb       	ldi	r22, 0xBB	; 187
 4b0:	7a ea       	ldi	r23, 0xAA	; 170
 4b2:	7e 83       	std	Y+6, r23	; 0x06
 4b4:	6d 83       	std	Y+5, r22	; 0x05
 4b6:	18 86       	std	Y+8, r1	; 0x08
 4b8:	1f 82       	std	Y+7, r1	; 0x07
 4ba:	43 5e       	subi	r20, 0xE3	; 227
 4bc:	5b 4f       	sbci	r21, 0xFB	; 251
 4be:	5a 87       	std	Y+10, r21	; 0x0a
 4c0:	49 87       	std	Y+9, r20	; 0x09
 4c2:	8b 87       	std	Y+11, r24	; 0x0b
 4c4:	9c 87       	std	Y+12, r25	; 0x0c
 4c6:	1e 86       	std	Y+14, r1	; 0x0e
 4c8:	1d 86       	std	Y+13, r1	; 0x0d
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	9e ee       	ldi	r25, 0xEE	; 238
 4ce:	98 8b       	std	Y+16, r25	; 0x10
 4d0:	8f 87       	std	Y+15, r24	; 0x0f
 4d2:	80 e1       	ldi	r24, 0x10	; 16
 4d4:	28 9f       	mul	r18, r24
 4d6:	d0 01       	movw	r26, r0
 4d8:	11 24       	eor	r1, r1
 4da:	a0 50       	subi	r26, 0x00	; 0
 4dc:	bf 4f       	sbci	r27, 0xFF	; 255
 4de:	80 e1       	ldi	r24, 0x10	; 16
 4e0:	fe 01       	movw	r30, r28
 4e2:	31 96       	adiw	r30, 0x01	; 1
 4e4:	01 90       	ld	r0, Z+
 4e6:	0d 92       	st	X+, r0
 4e8:	8a 95       	dec	r24
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <createTask+0xba>
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <_end+0x301>
 4f2:	60 96       	adiw	r28, 0x10	; 16
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <main>:
 504:	0e 94 54 01 	call	0x2a8	; 0x2a8 <semiphoreSetup>
 508:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <clrRam>
 50c:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
 510:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_end+0x301>
 514:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 518:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 51c:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 520:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 524:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 528:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 52c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 530:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 534:	87 b1       	in	r24, 0x07	; 7
 536:	89 60       	ori	r24, 0x09	; 9
 538:	87 b9       	out	0x07, r24	; 7
 53a:	84 b1       	in	r24, 0x04	; 4
 53c:	8f 62       	ori	r24, 0x2F	; 47
 53e:	84 b9       	out	0x04, r24	; 4
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	8a b9       	out	0x0a, r24	; 10
 544:	6b 9a       	sbi	0x0d, 3	; 13
 546:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 54a:	83 ed       	ldi	r24, 0xD3	; 211
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 552:	8f e2       	ldi	r24, 0x2F	; 47
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 55a:	81 e3       	ldi	r24, 0x31	; 49
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 562:	8b e1       	ldi	r24, 0x1B	; 27
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 56a:	83 e3       	ldi	r24, 0x33	; 51
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 572:	8c e3       	ldi	r24, 0x3C	; 60
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 57a:	84 e4       	ldi	r24, 0x44	; 68
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 582:	8c e4       	ldi	r24, 0x4C	; 76
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 58a:	81 e1       	ldi	r24, 0x11	; 17
 58c:	93 e0       	ldi	r25, 0x03	; 3
 58e:	0e 94 15 02 	call	0x42a	; 0x42a <createTask>
 592:	0e 94 02 02 	call	0x404	; 0x404 <tickTimerSetup>
 596:	0e 94 a2 00 	call	0x144	; 0x144 <LOADSTATE>
 59a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 5a4:	fa cf       	rjmp	.-12     	; 0x59a <main+0x96>

000005a6 <incrementTask>:
	
	
}

void incrementTask(){
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
	while(1){
		taskCounter = (taskCounter + 1) % numberOfTasks;
 5aa:	c0 91 01 04 	lds	r28, 0x0401	; 0x800401 <_end+0x301>
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
 5b0:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_end+0x300>
 5b4:	82 2f       	mov	r24, r18
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	be 01       	movw	r22, r28
 5bc:	0e 94 22 03 	call	0x644	; 0x644 <__divmodhi4>
 5c0:	28 2f       	mov	r18, r24
 5c2:	99 27       	eor	r25, r25
		// if has a task function and is ready
		if(taskArray[taskCounter].taskFunction && taskArray[taskCounter].state == READY) break;
 5c4:	fc 01       	movw	r30, r24
 5c6:	e2 95       	swap	r30
 5c8:	f2 95       	swap	r31
 5ca:	f0 7f       	andi	r31, 0xF0	; 240
 5cc:	fe 27       	eor	r31, r30
 5ce:	e0 7f       	andi	r30, 0xF0	; 240
 5d0:	fe 27       	eor	r31, r30
 5d2:	e0 50       	subi	r30, 0x00	; 0
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	42 81       	ldd	r20, Z+2	; 0x02
 5d8:	53 81       	ldd	r21, Z+3	; 0x03
 5da:	45 2b       	or	r20, r21
 5dc:	59 f3       	breq	.-42     	; 0x5b4 <incrementTask+0xe>
 5de:	82 95       	swap	r24
 5e0:	92 95       	swap	r25
 5e2:	90 7f       	andi	r25, 0xF0	; 240
 5e4:	98 27       	eor	r25, r24
 5e6:	80 7f       	andi	r24, 0xF0	; 240
 5e8:	98 27       	eor	r25, r24
 5ea:	fc 01       	movw	r30, r24
 5ec:	e0 50       	subi	r30, 0x00	; 0
 5ee:	ff 4f       	sbci	r31, 0xFF	; 255
 5f0:	86 81       	ldd	r24, Z+6	; 0x06
 5f2:	97 81       	ldd	r25, Z+7	; 0x07
 5f4:	89 2b       	or	r24, r25
 5f6:	f1 f6       	brne	.-68     	; 0x5b4 <incrementTask+0xe>
 5f8:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <_end+0x300>
	}
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <getSemi>:

void getSemi(uint8_t s){
	taskArray[taskCounter].state = WAITING;
 602:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_end+0x300>
 606:	90 e1       	ldi	r25, 0x10	; 16
 608:	e9 9f       	mul	r30, r25
 60a:	f0 01       	movw	r30, r0
 60c:	11 24       	eor	r1, r1
 60e:	e0 50       	subi	r30, 0x00	; 0
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	22 e0       	ldi	r18, 0x02	; 2
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	37 83       	std	Z+7, r19	; 0x07
 618:	26 83       	std	Z+6, r18	; 0x06
	taskArray[taskCounter].waitingFor = s;
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	95 87       	std	Z+13, r25	; 0x0d
 61e:	84 87       	std	Z+12, r24	; 0x0c
 620:	08 95       	ret

00000622 <LEDWhite>:
	}
}

void LEDWhite(){
	while(1){
		PORTC |= (1 << 3); // enable anode
 622:	43 9a       	sbi	0x08, 3	; 8
		PORTD &= ~(1 << 6); // turn on red
 624:	5e 98       	cbi	0x0b, 6	; 11
		PORTB &= ~(1 << 1); // turn on grn
 626:	29 98       	cbi	0x05, 1	; 5
		PORTB &= ~(1 << 3); // turn on blu
 628:	2b 98       	cbi	0x05, 3	; 5
		requestSemiphore(SEMI_PORTE_0);
 62a:	f8 94       	cli
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	0e 94 01 03 	call	0x602	; 0x602 <getSemi>
 632:	78 94       	sei
 634:	f6 cf       	rjmp	.-20     	; 0x622 <LEDWhite>

00000636 <semiphoreTestFunction>:
	}
}

void semiphoreTestFunction(){
	while(1){
		PINC |= 1 << 0;
 636:	30 9a       	sbi	0x06, 0	; 6
		requestSemiphore(SEMI_PORTB_0);
 638:	f8 94       	cli
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 01 03 	call	0x602	; 0x602 <getSemi>
 640:	78 94       	sei
 642:	f9 cf       	rjmp	.-14     	; 0x636 <semiphoreTestFunction>

00000644 <__divmodhi4>:
 644:	97 fb       	bst	r25, 7
 646:	07 2e       	mov	r0, r23
 648:	16 f4       	brtc	.+4      	; 0x64e <__divmodhi4+0xa>
 64a:	00 94       	com	r0
 64c:	07 d0       	rcall	.+14     	; 0x65c <__divmodhi4_neg1>
 64e:	77 fd       	sbrc	r23, 7
 650:	09 d0       	rcall	.+18     	; 0x664 <__divmodhi4_neg2>
 652:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__udivmodhi4>
 656:	07 fc       	sbrc	r0, 7
 658:	05 d0       	rcall	.+10     	; 0x664 <__divmodhi4_neg2>
 65a:	3e f4       	brtc	.+14     	; 0x66a <__divmodhi4_exit>

0000065c <__divmodhi4_neg1>:
 65c:	90 95       	com	r25
 65e:	81 95       	neg	r24
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__divmodhi4_neg2>:
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255

0000066a <__divmodhi4_exit>:
 66a:	08 95       	ret

0000066c <__ashrdi3>:
 66c:	97 fb       	bst	r25, 7
 66e:	10 f8       	bld	r1, 0

00000670 <__lshrdi3>:
 670:	16 94       	lsr	r1
 672:	00 08       	sbc	r0, r0
 674:	0f 93       	push	r16
 676:	08 30       	cpi	r16, 0x08	; 8
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__lshrdi3+0x30>
 67a:	08 50       	subi	r16, 0x08	; 8
 67c:	23 2f       	mov	r18, r19
 67e:	34 2f       	mov	r19, r20
 680:	45 2f       	mov	r20, r21
 682:	56 2f       	mov	r21, r22
 684:	67 2f       	mov	r22, r23
 686:	78 2f       	mov	r23, r24
 688:	89 2f       	mov	r24, r25
 68a:	90 2d       	mov	r25, r0
 68c:	f4 cf       	rjmp	.-24     	; 0x676 <__lshrdi3+0x6>
 68e:	05 94       	asr	r0
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	57 95       	ror	r21
 69a:	47 95       	ror	r20
 69c:	37 95       	ror	r19
 69e:	27 95       	ror	r18
 6a0:	0a 95       	dec	r16
 6a2:	aa f7       	brpl	.-22     	; 0x68e <__lshrdi3+0x1e>
 6a4:	0f 91       	pop	r16
 6a6:	08 95       	ret

000006a8 <__cmpdi2_s8>:
 6a8:	00 24       	eor	r0, r0
 6aa:	a7 fd       	sbrc	r26, 7
 6ac:	00 94       	com	r0
 6ae:	2a 17       	cp	r18, r26
 6b0:	30 05       	cpc	r19, r0
 6b2:	40 05       	cpc	r20, r0
 6b4:	50 05       	cpc	r21, r0
 6b6:	60 05       	cpc	r22, r0
 6b8:	70 05       	cpc	r23, r0
 6ba:	80 05       	cpc	r24, r0
 6bc:	90 05       	cpc	r25, r0
 6be:	08 95       	ret

000006c0 <__udivmodhi4>:
 6c0:	aa 1b       	sub	r26, r26
 6c2:	bb 1b       	sub	r27, r27
 6c4:	51 e1       	ldi	r21, 0x11	; 17
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <__udivmodhi4_ep>

000006c8 <__udivmodhi4_loop>:
 6c8:	aa 1f       	adc	r26, r26
 6ca:	bb 1f       	adc	r27, r27
 6cc:	a6 17       	cp	r26, r22
 6ce:	b7 07       	cpc	r27, r23
 6d0:	10 f0       	brcs	.+4      	; 0x6d6 <__udivmodhi4_ep>
 6d2:	a6 1b       	sub	r26, r22
 6d4:	b7 0b       	sbc	r27, r23

000006d6 <__udivmodhi4_ep>:
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	5a 95       	dec	r21
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <__udivmodhi4_loop>
 6de:	80 95       	com	r24
 6e0:	90 95       	com	r25
 6e2:	bc 01       	movw	r22, r24
 6e4:	cd 01       	movw	r24, r26
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
