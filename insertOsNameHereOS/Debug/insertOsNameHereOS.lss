
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000004a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d08  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c5  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002be  00000000  00000000  000029e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002ca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_42>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  c4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <os>:


 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  cc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  ce:	08 95       	ret

000000d0 <yield>:

.global yield
yield:
  JMP yield ; Spin.  This should do something more usefull later
  d0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <yield>

000000d4 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the registers
	IN R1, _SFR_IO_ADDR(SREG); R1 is zero and doesnt need to be saved 
  d4:	1f b6       	in	r1, 0x3f	; 63
	PUSH R31
  d6:	ff 93       	push	r31
	PUSH R30
  d8:	ef 93       	push	r30
	PUSH R29
  da:	df 93       	push	r29
	PUSH R28
  dc:	cf 93       	push	r28
	PUSH R27
  de:	bf 93       	push	r27
	PUSH R26
  e0:	af 93       	push	r26
	PUSH R25
  e2:	9f 93       	push	r25
	PUSH R24
  e4:	8f 93       	push	r24
	PUSH R23
  e6:	7f 93       	push	r23
	PUSH R22
  e8:	6f 93       	push	r22
	PUSH R21
  ea:	5f 93       	push	r21
	PUSH R20
  ec:	4f 93       	push	r20
	PUSH R19
  ee:	3f 93       	push	r19
	PUSH R18
  f0:	2f 93       	push	r18
	PUSH R17
  f2:	1f 93       	push	r17
	PUSH R16
  f4:	0f 93       	push	r16
	PUSH R15
  f6:	ff 92       	push	r15
	PUSH R14
  f8:	ef 92       	push	r14
	PUSH R13
  fa:	df 92       	push	r13
	PUSH R12
  fc:	cf 92       	push	r12
	PUSH R11
  fe:	bf 92       	push	r11
	PUSH R10
 100:	af 92       	push	r10
	PUSH R9
 102:	9f 92       	push	r9
	PUSH R8
 104:	8f 92       	push	r8
	PUSH R7
 106:	7f 92       	push	r7
	PUSH R6
 108:	6f 92       	push	r6
	PUSH R5
 10a:	5f 92       	push	r5
	PUSH R4
 10c:	4f 92       	push	r4
	PUSH R3
 10e:	3f 92       	push	r3
	PUSH R2
 110:	2f 92       	push	r2
	PUSH R1
 112:	1f 92       	push	r1
	PUSH R0
 114:	0f 92       	push	r0

  ; get the Task Counter into R17 and number of tasks into R18
    LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register
 116:	e0 e0       	ldi	r30, 0x00	; 0
    LDI ZH, TASKCOUNTERADDR_H
 118:	f4 e0       	ldi	r31, 0x04	; 4
    LD R17, Z+; get task counter
 11a:	11 91       	ld	r17, Z+
    LD R18, Z; get number of tasks
 11c:	20 81       	ld	r18, Z

  ; get the stack pointer
    IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
 11e:	ed b7       	in	r30, 0x3d	; 61
    IN ZH, _SFR_IO_ADDR(SPH);
 120:	fe b7       	in	r31, 0x3e	; 62
    PUSH ZH; save the stack pointer
 122:	ff 93       	push	r31
    PUSH ZL
 124:	ef 93       	push	r30


  ; calculate address of current task structure
    LDI R16, 16
 126:	00 e1       	ldi	r16, 0x10	; 16
    MUL R17, R16; multiply task counter by 16 and put the result in R0
 128:	10 9f       	mul	r17, r16
    LDI ZL, STARTOFTASKLIST_L + 8; stack pointer address in task list
 12a:	e8 e0       	ldi	r30, 0x08	; 8
    LDI ZH, STARTOFTASKLIST_H
 12c:	f1 e0       	ldi	r31, 0x01	; 1
    ; task counter to offset
    ADD ZL, R0;
 12e:	e0 0d       	add	r30, r0
    ADC ZH, R1; does a 16bit add correct address now in Z register
 130:	f1 1d       	adc	r31, r1

  ; save stack pointer and program counter to task structure memeory
    POP R0; low byte of SP
 132:	0f 90       	pop	r0
	POP R1; high byte of SP 
 134:	1f 90       	pop	r1
    ST Z+, R0
 136:	01 92       	st	Z+, r0
    ST Z+, R1
 138:	11 92       	st	Z+, r1

  call incrementTask
 13a:	0e 94 a3 01 	call	0x346	; 0x346 <incrementTask>
;   INC R17; increment task counter
;  CP R17, R18
;  BRLO TaskNotOverflowed ; brach if lower
;  CLR R17; if taskCounter >= numberOfTasks reset to task 0
;  TaskNotOverflowed:
  LDI ZL, TASKCOUNTERADDR_L
 13e:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H
 140:	f4 e0       	ldi	r31, 0x04	; 4
  LD R17, Z
 142:	10 81       	ld	r17, Z

00000144 <LOADSTATE>:
  ; its not its part of the ISR but this should magically fix things 
  .global LOADSTATE
  LOADSTATE:
  ; Load saved state
    ; get saved SP
      LDI R16, 16
 144:	00 e1       	ldi	r16, 0x10	; 16
      MUL R17, R16; multiply task counter by 16 and put the result in R0
 146:	10 9f       	mul	r17, r16
      LDI ZL, STARTOFTASKLIST_L + 8; program counter address in task list
 148:	e8 e0       	ldi	r30, 0x08	; 8
      LDI ZH, STARTOFTASKLIST_H
 14a:	f1 e0       	ldi	r31, 0x01	; 1
      ; task counter to offset
      ADD ZL, R0;
 14c:	e0 0d       	add	r30, r0
      ADC ZH, R1; does a 16bit add correct address now in Z register
 14e:	f1 1d       	adc	r31, r1
      LD R0, Z+; SPL
 150:	01 90       	ld	r0, Z+
      PUSH R0
 152:	0f 92       	push	r0
      LD R0, Z; SPH
 154:	00 80       	ld	r0, Z
      PUSH R0
 156:	0f 92       	push	r0


    ; restore stack pointer 
      POP R1; SPH
 158:	1f 90       	pop	r1
      POP R0; SPL
 15a:	0f 90       	pop	r0
      OUT _SFR_IO_ADDR(SPH), R1
 15c:	1e be       	out	0x3e, r1	; 62
      OUT _SFR_IO_ADDR(SPL), R0
 15e:	0d be       	out	0x3d, r0	; 61
      

	POP R0
 160:	0f 90       	pop	r0
	POP R1
 162:	1f 90       	pop	r1
	OUT _SFR_IO_ADDR(SREG), R1; put the Status register back 
 164:	1f be       	out	0x3f, r1	; 63
	POP R2
 166:	2f 90       	pop	r2
	POP R3
 168:	3f 90       	pop	r3
	POP R4
 16a:	4f 90       	pop	r4
	POP R5
 16c:	5f 90       	pop	r5
	POP R6
 16e:	6f 90       	pop	r6
	POP R7
 170:	7f 90       	pop	r7
	POP R8
 172:	8f 90       	pop	r8
	POP R9
 174:	9f 90       	pop	r9
	POP R10
 176:	af 90       	pop	r10
	POP R11
 178:	bf 90       	pop	r11
	POP R12
 17a:	cf 90       	pop	r12
	POP R13
 17c:	df 90       	pop	r13
	POP R14
 17e:	ef 90       	pop	r14
	POP R15
 180:	ff 90       	pop	r15
	POP R16
 182:	0f 91       	pop	r16
	POP R17
 184:	1f 91       	pop	r17
	POP R18
 186:	2f 91       	pop	r18
	POP R19
 188:	3f 91       	pop	r19
	POP R20
 18a:	4f 91       	pop	r20
	POP R21
 18c:	5f 91       	pop	r21
	POP R22
 18e:	6f 91       	pop	r22
	POP R23
 190:	7f 91       	pop	r23
	POP R24
 192:	8f 91       	pop	r24
	POP R25
 194:	9f 91       	pop	r25
	POP R26
 196:	af 91       	pop	r26
	POP R27
 198:	bf 91       	pop	r27
	POP R28
 19a:	cf 91       	pop	r28
	POP R29
 19c:	df 91       	pop	r29
	POP R30
 19e:	ef 91       	pop	r30
	POP R31
 1a0:	ff 91       	pop	r31
	CLR R1
 1a2:	11 24       	eor	r1, r1
    ; PC shoudld be on stack

  reti
 1a4:	18 95       	reti

000001a6 <blinkyTaskFunction>:
	}
}

void blinkyTaskFunction(){
	while (1) {
		PORTB |= 1 << 5;
 1a6:	2d 9a       	sbi	0x05, 5	; 5
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <blinkyTaskFunction>

000001aa <blinkyTask2Function>:
	}
}
void blinkyTask2Function(){
	while (1) {
		PORTB &= ~(1 << 5);
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <blinkyTask2Function>

000001ae <clrRam>:
	}
}

void clrRam(){
	// hella sketch
	for(uint16_t* i = 0x100; i < 0x700; i++){
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
		*i = 0x0000;
 1b2:	11 92       	st	Z+, r1
 1b4:	11 92       	st	Z+, r1
	}
}

void clrRam(){
	// hella sketch
	for(uint16_t* i = 0x100; i < 0x700; i++){
 1b6:	e1 15       	cp	r30, r1
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	f8 07       	cpc	r31, r24
 1bc:	d1 f7       	brne	.-12     	; 0x1b2 <clrRam+0x4>
		*i = 0x0000;
	}
}
 1be:	08 95       	ret

000001c0 <tickTimerSetup>:

void tickTimerSetup(){
	TCCR4A = 0;
 1c0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	// ctc mode		// clk / 8
	TCCR4B = (1 << WGM42) | (0b010 << CS40);
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	OCR4A = TIMER_TICK_TIME_LOAD_VALUE;
 1ca:	80 ed       	ldi	r24, 0xD0	; 208
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1d2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	TIMSK4 = 1 << OCIE4A;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TCNT4 = 0;
 1dc:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 1e0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 1e4:	08 95       	ret

000001e6 <createTask>:
}

void createTask(void (*taskF)(void)){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	60 97       	sbiw	r28, 0x10	; 16
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t firstOpenIndex = 0; 
	Task t;
	
	// find the first open slot for a task 
	while(1){
		t = taskArray[firstOpenIndex];
 1fa:	20 e1       	ldi	r18, 0x10	; 16
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	de 01       	movw	r26, r28
 202:	11 96       	adiw	r26, 0x01	; 1
 204:	01 90       	ld	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	2a 95       	dec	r18
 20a:	e1 f7       	brne	.-8      	; 0x204 <createTask+0x1e>
		if (t.taskFunction == 0) break;
 20c:	2b 81       	ldd	r18, Y+3	; 0x03
 20e:	3c 81       	ldd	r19, Y+4	; 0x04
 210:	23 2b       	or	r18, r19
 212:	99 f0       	breq	.+38     	; 0x23a <createTask+0x54>
 214:	20 e0       	ldi	r18, 0x00	; 0
		firstOpenIndex++; 
 216:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t firstOpenIndex = 0; 
	Task t;
	
	// find the first open slot for a task 
	while(1){
		t = taskArray[firstOpenIndex];
 218:	30 e1       	ldi	r19, 0x10	; 16
 21a:	23 9f       	mul	r18, r19
 21c:	f0 01       	movw	r30, r0
 21e:	11 24       	eor	r1, r1
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	30 e1       	ldi	r19, 0x10	; 16
 226:	de 01       	movw	r26, r28
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	3a 95       	dec	r19
 230:	e1 f7       	brne	.-8      	; 0x22a <createTask+0x44>
		if (t.taskFunction == 0) break;
 232:	4b 81       	ldd	r20, Y+3	; 0x03
 234:	5c 81       	ldd	r21, Y+4	; 0x04
 236:	45 2b       	or	r20, r21
 238:	71 f7       	brne	.-36     	; 0x216 <createTask+0x30>
		firstOpenIndex++; 
		
	}
	
	t.taskID = numberOfTasks; // tasks start at 1
 23a:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <_end+0x301>
	t.placeHolder = (uint16_t *) 0xAABB;
	t.placeHolder2 = (uint16_t *) 0xCCDD;
	t.placeHolder3 = (uint16_t *) 0xEEFF;
	t.state = READY;
	t.programCounter = taskF;
	t.stackPointer = 0x043F + 64 * numberOfTasks - 34;
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	ab 01       	movw	r20, r22
 242:	00 24       	eor	r0, r0
 244:	56 95       	lsr	r21
 246:	47 95       	ror	r20
 248:	07 94       	ror	r0
 24a:	56 95       	lsr	r21
 24c:	47 95       	ror	r20
 24e:	07 94       	ror	r0
 250:	54 2f       	mov	r21, r20
 252:	40 2d       	mov	r20, r0
	
	// sketchy hard coded pointer stuff
	uint16_t defNotAPtrtoTaskF = taskF; // compilers suck
	uint8_t* ptrToStackIntial = 0x043F + 64 * numberOfTasks -1;
 254:	fa 01       	movw	r30, r20
 256:	e2 5c       	subi	r30, 0xC2	; 194
 258:	fb 4f       	sbci	r31, 0xFB	; 251
	*ptrToStackIntial = defNotAPtrtoTaskF >> 8;
 25a:	90 83       	st	Z, r25
	ptrToStackIntial += 1;
	*ptrToStackIntial = defNotAPtrtoTaskF & 0xFF;
 25c:	81 83       	std	Z+1, r24	; 0x01
	

	taskArray[numberOfTasks] = t;
 25e:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_end+0x301>
 262:	7a 83       	std	Y+2, r23	; 0x02
 264:	69 83       	std	Y+1, r22	; 0x01
 266:	8b 83       	std	Y+3, r24	; 0x03
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	6b eb       	ldi	r22, 0xBB	; 187
 26c:	7a ea       	ldi	r23, 0xAA	; 170
 26e:	7e 83       	std	Y+6, r23	; 0x06
 270:	6d 83       	std	Y+5, r22	; 0x05
 272:	18 86       	std	Y+8, r1	; 0x08
 274:	1f 82       	std	Y+7, r1	; 0x07
 276:	43 5e       	subi	r20, 0xE3	; 227
 278:	5b 4f       	sbci	r21, 0xFB	; 251
 27a:	5a 87       	std	Y+10, r21	; 0x0a
 27c:	49 87       	std	Y+9, r20	; 0x09
 27e:	8b 87       	std	Y+11, r24	; 0x0b
 280:	9c 87       	std	Y+12, r25	; 0x0c
 282:	8d ed       	ldi	r24, 0xDD	; 221
 284:	9c ec       	ldi	r25, 0xCC	; 204
 286:	9e 87       	std	Y+14, r25	; 0x0e
 288:	8d 87       	std	Y+13, r24	; 0x0d
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	9e ee       	ldi	r25, 0xEE	; 238
 28e:	98 8b       	std	Y+16, r25	; 0x10
 290:	8f 87       	std	Y+15, r24	; 0x0f
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	28 9f       	mul	r18, r24
 296:	d0 01       	movw	r26, r0
 298:	11 24       	eor	r1, r1
 29a:	a0 50       	subi	r26, 0x00	; 0
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	80 e1       	ldi	r24, 0x10	; 16
 2a0:	fe 01       	movw	r30, r28
 2a2:	31 96       	adiw	r30, 0x01	; 1
 2a4:	01 90       	ld	r0, Z+
 2a6:	0d 92       	st	X+, r0
 2a8:	8a 95       	dec	r24
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <createTask+0xbe>

	numberOfTasks++;// increment total number of tasks
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <_end+0x301>
}
 2b2:	60 96       	adiw	r28, 0x10	; 16
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <main>:

volatile uint8_t i __attribute__((address (0x402)));

int main(void)
{
	clrRam();
 2c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <clrRam>
	taskCounter = 0;
 2c8:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
	numberOfTasks = 0;
 2cc:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_end+0x301>
	DDRC |= 1 << 0; // heartbeat pin
 2d0:	38 9a       	sbi	0x07, 0	; 7
	DDRB |= 1 << 5;
 2d2:	25 9a       	sbi	0x04, 5	; 4

	i = 0;
 2d4:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>

	

	createTask(taskScheduler);
 2d8:	81 e9       	ldi	r24, 0x91	; 145
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <createTask>
	createTask(blinkyTaskFunction);
 2e0:	83 ed       	ldi	r24, 0xD3	; 211
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <createTask>
	createTask(blinkyTask2Function);
 2e8:	85 ed       	ldi	r24, 0xD5	; 213
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <createTask>

	tickTimerSetup();
 2f0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <tickTimerSetup>
	LOADSTATE();
 2f4:	0e 94 a2 00 	call	0x144	; 0x144 <LOADSTATE>
	

	/* Replace with your application code */
	while (1)
	{
		i++;
 2f8:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 302:	fa cf       	rjmp	.-12     	; 0x2f8 <main+0x34>

00000304 <killTask>:
	numberOfTasks++;// increment total number of tasks
}

void killTask(uint8_t taskId){
	// verify its a real task and not the os
	if(taskId >= numberOfTasks || taskId == 0) return;
 304:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_end+0x301>
 308:	89 17       	cp	r24, r25
 30a:	50 f4       	brcc	.+20     	; 0x320 <killTask+0x1c>
 30c:	88 23       	and	r24, r24
 30e:	41 f0       	breq	.+16     	; 0x320 <killTask+0x1c>
	taskArray[taskId].taskFunction = NULL;
 310:	90 e1       	ldi	r25, 0x10	; 16
 312:	89 9f       	mul	r24, r25
 314:	f0 01       	movw	r30, r0
 316:	11 24       	eor	r1, r1
 318:	e0 50       	subi	r30, 0x00	; 0
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	13 82       	std	Z+3, r1	; 0x03
 31e:	12 82       	std	Z+2, r1	; 0x02
 320:	08 95       	ret

00000322 <taskScheduler>:

// do all the task scheduling
void taskScheduler(){
	while (1)
	{
		cli();
 322:	f8 94       	cli
		if(numberOfTasks == 3){
 324:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_end+0x301>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	59 f4       	brne	.+22     	; 0x342 <taskScheduler+0x20>
			killTask(2);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 82 01 	call	0x304	; 0x304 <killTask>
			createTask(blinkyTaskFunction);
 332:	83 ed       	ldi	r24, 0xD3	; 211
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <createTask>
			createTask(blinkyTask2Function);
 33a:	85 ed       	ldi	r24, 0xD5	; 213
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <createTask>
		}
	
		sei();
 342:	78 94       	sei
	}
 344:	ee cf       	rjmp	.-36     	; 0x322 <taskScheduler>

00000346 <incrementTask>:
	taskArray[taskId].taskFunction = NULL;
	
		
}

void incrementTask(){
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	while(1){
		taskCounter = (taskCounter + 1) % numberOfTasks;
 34a:	c0 91 01 04 	lds	r28, 0x0401	; 0x800401 <_end+0x301>
 34e:	d0 e0       	ldi	r29, 0x00	; 0
 350:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_end+0x300>
 354:	82 2f       	mov	r24, r18
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	be 01       	movw	r22, r28
 35c:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 360:	28 2f       	mov	r18, r24
 362:	fc 01       	movw	r30, r24
 364:	ff 27       	eor	r31, r31
		// if has a task function 
		if(taskArray[taskCounter].taskFunction) break;
 366:	e2 95       	swap	r30
 368:	f2 95       	swap	r31
 36a:	f0 7f       	andi	r31, 0xF0	; 240
 36c:	fe 27       	eor	r31, r30
 36e:	e0 7f       	andi	r30, 0xF0	; 240
 370:	fe 27       	eor	r31, r30
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	82 81       	ldd	r24, Z+2	; 0x02
 378:	93 81       	ldd	r25, Z+3	; 0x03
 37a:	89 2b       	or	r24, r25
 37c:	59 f3       	breq	.-42     	; 0x354 <incrementTask+0xe>
 37e:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <_end+0x300>
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	07 2e       	mov	r0, r23
 38c:	16 f4       	brtc	.+4      	; 0x392 <__divmodhi4+0xa>
 38e:	00 94       	com	r0
 390:	07 d0       	rcall	.+14     	; 0x3a0 <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	09 d0       	rcall	.+18     	; 0x3a8 <__divmodhi4_neg2>
 396:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__udivmodhi4>
 39a:	07 fc       	sbrc	r0, 7
 39c:	05 d0       	rcall	.+10     	; 0x3a8 <__divmodhi4_neg2>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__divmodhi4_exit>

000003a0 <__divmodhi4_neg1>:
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	08 95       	ret

000003a8 <__divmodhi4_neg2>:
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255

000003ae <__divmodhi4_exit>:
 3ae:	08 95       	ret

000003b0 <__udivmodhi4>:
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	51 e1       	ldi	r21, 0x11	; 17
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__udivmodhi4_ep>

000003b8 <__udivmodhi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__udivmodhi4_ep>
 3c2:	a6 1b       	sub	r26, r22
 3c4:	b7 0b       	sbc	r27, r23

000003c6 <__udivmodhi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	5a 95       	dec	r21
 3cc:	a9 f7       	brne	.-22     	; 0x3b8 <__udivmodhi4_loop>
 3ce:	80 95       	com	r24
 3d0:	90 95       	com	r25
 3d2:	bc 01       	movw	r22, r24
 3d4:	cd 01       	movw	r24, r26
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
