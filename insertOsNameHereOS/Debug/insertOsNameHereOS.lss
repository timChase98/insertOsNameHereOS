
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000007b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f31  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2c  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009aa  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00002ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000691  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000434  00000000  00000000  00003535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_3>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_27>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_42>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 2d 02 	call	0x45a	; 0x45a <main>
  c4:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <os>:


 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  cc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  ce:	08 95       	ret

000000d0 <yield>:

.global yield
yield:
  JMP yield ; Spin.  This should do something more usefull later
  d0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <yield>

000000d4 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the registers
	IN R1, _SFR_IO_ADDR(SREG); R1 is zero and doesnt need to be saved 
  d4:	1f b6       	in	r1, 0x3f	; 63
	PUSH R31
  d6:	ff 93       	push	r31
	PUSH R30
  d8:	ef 93       	push	r30
	PUSH R29
  da:	df 93       	push	r29
	PUSH R28
  dc:	cf 93       	push	r28
	PUSH R27
  de:	bf 93       	push	r27
	PUSH R26
  e0:	af 93       	push	r26
	PUSH R25
  e2:	9f 93       	push	r25
	PUSH R24
  e4:	8f 93       	push	r24
	PUSH R23
  e6:	7f 93       	push	r23
	PUSH R22
  e8:	6f 93       	push	r22
	PUSH R21
  ea:	5f 93       	push	r21
	PUSH R20
  ec:	4f 93       	push	r20
	PUSH R19
  ee:	3f 93       	push	r19
	PUSH R18
  f0:	2f 93       	push	r18
	PUSH R17
  f2:	1f 93       	push	r17
	PUSH R16
  f4:	0f 93       	push	r16
	PUSH R15
  f6:	ff 92       	push	r15
	PUSH R14
  f8:	ef 92       	push	r14
	PUSH R13
  fa:	df 92       	push	r13
	PUSH R12
  fc:	cf 92       	push	r12
	PUSH R11
  fe:	bf 92       	push	r11
	PUSH R10
 100:	af 92       	push	r10
	PUSH R9
 102:	9f 92       	push	r9
	PUSH R8
 104:	8f 92       	push	r8
	PUSH R7
 106:	7f 92       	push	r7
	PUSH R6
 108:	6f 92       	push	r6
	PUSH R5
 10a:	5f 92       	push	r5
	PUSH R4
 10c:	4f 92       	push	r4
	PUSH R3
 10e:	3f 92       	push	r3
	PUSH R2
 110:	2f 92       	push	r2
	PUSH R1
 112:	1f 92       	push	r1
	PUSH R0
 114:	0f 92       	push	r0

  ; get the Task Counter into R17 and number of tasks into R18
    LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register
 116:	e0 e0       	ldi	r30, 0x00	; 0
    LDI ZH, TASKCOUNTERADDR_H
 118:	f4 e0       	ldi	r31, 0x04	; 4
    LD R17, Z+; get task counter
 11a:	11 91       	ld	r17, Z+
    LD R18, Z; get number of tasks
 11c:	20 81       	ld	r18, Z

  ; get the stack pointer
    IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
 11e:	ed b7       	in	r30, 0x3d	; 61
    IN ZH, _SFR_IO_ADDR(SPH);
 120:	fe b7       	in	r31, 0x3e	; 62
    PUSH ZH; save the stack pointer
 122:	ff 93       	push	r31
    PUSH ZL
 124:	ef 93       	push	r30


  ; calculate address of current task structure
    LDI R16, 16
 126:	00 e1       	ldi	r16, 0x10	; 16
    MUL R17, R16; multiply task counter by 16 and put the result in R0
 128:	10 9f       	mul	r17, r16
    LDI ZL, STARTOFTASKLIST_L + 8; stack pointer address in task list
 12a:	e8 e0       	ldi	r30, 0x08	; 8
    LDI ZH, STARTOFTASKLIST_H
 12c:	f1 e0       	ldi	r31, 0x01	; 1
    ; task counter to offset
    ADD ZL, R0;
 12e:	e0 0d       	add	r30, r0
    ADC ZH, R1; does a 16bit add correct address now in Z register
 130:	f1 1d       	adc	r31, r1

  ; save stack pointer and program counter to task structure memeory
    POP R0; low byte of SP
 132:	0f 90       	pop	r0
	POP R1; high byte of SP 
 134:	1f 90       	pop	r1
    ST Z+, R0
 136:	01 92       	st	Z+, r0
    ST Z+, R1
 138:	11 92       	st	Z+, r1

  call incrementTask
 13a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <incrementTask>
;   INC R17; increment task counter
;  CP R17, R18
;  BRLO TaskNotOverflowed ; brach if lower
;  CLR R17; if taskCounter >= numberOfTasks reset to task 0
;  TaskNotOverflowed:
  LDI ZL, TASKCOUNTERADDR_L
 13e:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H
 140:	f4 e0       	ldi	r31, 0x04	; 4
  LD R17, Z
 142:	10 81       	ld	r17, Z

00000144 <LOADSTATE>:
  ; its not its part of the ISR but this should magically fix things 
  .global LOADSTATE
  LOADSTATE:
  ; Load saved state
    ; get saved SP
      LDI R16, 16
 144:	00 e1       	ldi	r16, 0x10	; 16
      MUL R17, R16; multiply task counter by 16 and put the result in R0
 146:	10 9f       	mul	r17, r16
      LDI ZL, STARTOFTASKLIST_L + 8; program counter address in task list
 148:	e8 e0       	ldi	r30, 0x08	; 8
      LDI ZH, STARTOFTASKLIST_H
 14a:	f1 e0       	ldi	r31, 0x01	; 1
      ; task counter to offset
      ADD ZL, R0;
 14c:	e0 0d       	add	r30, r0
      ADC ZH, R1; does a 16bit add correct address now in Z register
 14e:	f1 1d       	adc	r31, r1
      LD R0, Z+; SPL
 150:	01 90       	ld	r0, Z+
      PUSH R0
 152:	0f 92       	push	r0
      LD R0, Z; SPH
 154:	00 80       	ld	r0, Z
      PUSH R0
 156:	0f 92       	push	r0


    ; restore stack pointer 
      POP R1; SPH
 158:	1f 90       	pop	r1
      POP R0; SPL
 15a:	0f 90       	pop	r0
      OUT _SFR_IO_ADDR(SPH), R1
 15c:	1e be       	out	0x3e, r1	; 62
      OUT _SFR_IO_ADDR(SPL), R0
 15e:	0d be       	out	0x3d, r0	; 61
      

	POP R0
 160:	0f 90       	pop	r0
	POP R1
 162:	1f 90       	pop	r1
	OUT _SFR_IO_ADDR(SREG), R1; put the Status register back 
 164:	1f be       	out	0x3f, r1	; 63
	POP R2
 166:	2f 90       	pop	r2
	POP R3
 168:	3f 90       	pop	r3
	POP R4
 16a:	4f 90       	pop	r4
	POP R5
 16c:	5f 90       	pop	r5
	POP R6
 16e:	6f 90       	pop	r6
	POP R7
 170:	7f 90       	pop	r7
	POP R8
 172:	8f 90       	pop	r8
	POP R9
 174:	9f 90       	pop	r9
	POP R10
 176:	af 90       	pop	r10
	POP R11
 178:	bf 90       	pop	r11
	POP R12
 17a:	cf 90       	pop	r12
	POP R13
 17c:	df 90       	pop	r13
	POP R14
 17e:	ef 90       	pop	r14
	POP R15
 180:	ff 90       	pop	r15
	POP R16
 182:	0f 91       	pop	r16
	POP R17
 184:	1f 91       	pop	r17
	POP R18
 186:	2f 91       	pop	r18
	POP R19
 188:	3f 91       	pop	r19
	POP R20
 18a:	4f 91       	pop	r20
	POP R21
 18c:	5f 91       	pop	r21
	POP R22
 18e:	6f 91       	pop	r22
	POP R23
 190:	7f 91       	pop	r23
	POP R24
 192:	8f 91       	pop	r24
	POP R25
 194:	9f 91       	pop	r25
	POP R26
 196:	af 91       	pop	r26
	POP R27
 198:	bf 91       	pop	r27
	POP R28
 19a:	cf 91       	pop	r28
	POP R29
 19c:	df 91       	pop	r29
	POP R30
 19e:	ef 91       	pop	r30
	POP R31
 1a0:	ff 91       	pop	r31
	CLR R1
 1a2:	11 24       	eor	r1, r1
    ; PC shoudld be on stack

  reti
 1a4:	18 95       	reti

000001a6 <blinkyTask2Function>:
	}
}

void getSemi(uint8_t s){
	taskArray[taskCounter].state = WAITING;
	taskArray[taskCounter].waitingFor = s;
 1a6:	2d 98       	cbi	0x05, 5	; 5
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <blinkyTask2Function>

000001aa <semiphoreSetup>:
 1aa:	89 e0       	ldi	r24, 0x09	; 9
 1ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 1b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1ba:	08 95       	ret

000001bc <__vector_3>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	18 9b       	sbis	0x03, 0	; 3
 1d8:	22 c0       	rjmp	.+68     	; 0x21e <__vector_3+0x62>
 1da:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_end+0x303>
 1de:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <_end+0x304>
 1e2:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_end+0x305>
 1e6:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 1ea:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <_end+0x307>
 1ee:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_end+0x308>
 1f2:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_end+0x309>
 1f6:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_end+0x303>
 200:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <_end+0x304>
 204:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <_end+0x305>
 208:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <_end+0x306>
 20c:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <_end+0x307>
 210:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <_end+0x308>
 214:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <_end+0x309>
 218:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_end+0x30a>
 21c:	10 c0       	rjmp	.+32     	; 0x23e <__vector_3+0x82>
 21e:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 222:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 226:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 22a:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 22e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 232:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 236:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 23a:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_27>:
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	60 99       	sbic	0x0c, 0	; 12
 274:	22 c0       	rjmp	.+68     	; 0x2ba <__vector_27+0x62>
 276:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_end+0x303>
 27a:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <_end+0x304>
 27e:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_end+0x305>
 282:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 286:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <_end+0x307>
 28a:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_end+0x308>
 28e:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_end+0x309>
 292:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 296:	80 61       	ori	r24, 0x10	; 16
 298:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_end+0x303>
 29c:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <_end+0x304>
 2a0:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <_end+0x305>
 2a4:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <_end+0x306>
 2a8:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <_end+0x307>
 2ac:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <_end+0x308>
 2b0:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <_end+0x309>
 2b4:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_end+0x30a>
 2b8:	10 c0       	rjmp	.+32     	; 0x2da <__vector_27+0x82>
 2ba:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 2be:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 2c2:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 2c6:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 2ca:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 2ce:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 2d2:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 2d6:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <clrRam>:
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	11 92       	st	Z+, r1
 2fa:	11 92       	st	Z+, r1
 2fc:	e1 15       	cp	r30, r1
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	f8 07       	cpc	r31, r24
 302:	d1 f7       	brne	.-12     	; 0x2f8 <clrRam+0x4>
 304:	08 95       	ret

00000306 <tickTimerSetup>:
 306:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 310:	88 ec       	ldi	r24, 0xC8	; 200
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 318:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 322:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 326:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 32a:	08 95       	ret

0000032c <initStackForTask>:
 32c:	9c 01       	movw	r18, r24
 32e:	00 24       	eor	r0, r0
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	07 94       	ror	r0
 336:	36 95       	lsr	r19
 338:	27 95       	ror	r18
 33a:	07 94       	ror	r0
 33c:	32 2f       	mov	r19, r18
 33e:	20 2d       	mov	r18, r0
 340:	a9 01       	movw	r20, r18
 342:	43 5e       	subi	r20, 0xE3	; 227
 344:	5b 4f       	sbci	r21, 0xFB	; 251
 346:	82 95       	swap	r24
 348:	92 95       	swap	r25
 34a:	90 7f       	andi	r25, 0xF0	; 240
 34c:	98 27       	eor	r25, r24
 34e:	80 7f       	andi	r24, 0xF0	; 240
 350:	98 27       	eor	r25, r24
 352:	fc 01       	movw	r30, r24
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	51 87       	std	Z+9, r21	; 0x09
 35a:	40 87       	std	Z+8, r20	; 0x08
 35c:	82 81       	ldd	r24, Z+2	; 0x02
 35e:	93 81       	ldd	r25, Z+3	; 0x03
 360:	f9 01       	movw	r30, r18
 362:	e2 5c       	subi	r30, 0xC2	; 194
 364:	fb 4f       	sbci	r31, 0xFB	; 251
 366:	90 83       	st	Z, r25
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	08 95       	ret

0000036c <createTask>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	60 97       	sbiw	r28, 0x10	; 16
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	8c 01       	movw	r16, r24
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	e0 e0       	ldi	r30, 0x00	; 0
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	de 01       	movw	r26, r28
 38e:	11 96       	adiw	r26, 0x01	; 1
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <createTask+0x24>
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	9c 81       	ldd	r25, Y+4	; 0x04
 39c:	89 2b       	or	r24, r25
 39e:	c9 f0       	breq	.+50     	; 0x3d2 <createTask+0x66>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	42 2f       	mov	r20, r18
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	fa 01       	movw	r30, r20
 3aa:	e2 95       	swap	r30
 3ac:	f2 95       	swap	r31
 3ae:	f0 7f       	andi	r31, 0xF0	; 240
 3b0:	fe 27       	eor	r31, r30
 3b2:	e0 7f       	andi	r30, 0xF0	; 240
 3b4:	fe 27       	eor	r31, r30
 3b6:	e0 50       	subi	r30, 0x00	; 0
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	90 e1       	ldi	r25, 0x10	; 16
 3bc:	de 01       	movw	r26, r28
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	9a 95       	dec	r25
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <createTask+0x54>
 3c8:	eb 81       	ldd	r30, Y+3	; 0x03
 3ca:	fc 81       	ldd	r31, Y+4	; 0x04
 3cc:	ef 2b       	or	r30, r31
 3ce:	49 f7       	brne	.-46     	; 0x3a2 <createTask+0x36>
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <createTask+0x6c>
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <_end+0x301>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	3a 83       	std	Y+2, r19	; 0x02
 3e0:	29 83       	std	Y+1, r18	; 0x01
 3e2:	1c 83       	std	Y+4, r17	; 0x04
 3e4:	0b 83       	std	Y+3, r16	; 0x03
 3e6:	1e 82       	std	Y+6, r1	; 0x06
 3e8:	1d 82       	std	Y+5, r1	; 0x05
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	98 87       	std	Y+8, r25	; 0x08
 3f0:	8f 83       	std	Y+7, r24	; 0x07
 3f2:	ca 01       	movw	r24, r20
 3f4:	00 24       	eor	r0, r0
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	07 94       	ror	r0
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	07 94       	ror	r0
 402:	98 2f       	mov	r25, r24
 404:	80 2d       	mov	r24, r0
 406:	83 5e       	subi	r24, 0xE3	; 227
 408:	9b 4f       	sbci	r25, 0xFB	; 251
 40a:	9a 87       	std	Y+10, r25	; 0x0a
 40c:	89 87       	std	Y+9, r24	; 0x09
 40e:	1c 87       	std	Y+12, r17	; 0x0c
 410:	0b 87       	std	Y+11, r16	; 0x0b
 412:	1e 86       	std	Y+14, r1	; 0x0e
 414:	1d 86       	std	Y+13, r1	; 0x0d
 416:	78 8b       	std	Y+16, r23	; 0x10
 418:	6f 87       	std	Y+15, r22	; 0x0f
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	a8 9f       	mul	r26, r24
 41e:	d0 01       	movw	r26, r0
 420:	11 24       	eor	r1, r1
 422:	a0 50       	subi	r26, 0x00	; 0
 424:	bf 4f       	sbci	r27, 0xFF	; 255
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	fe 01       	movw	r30, r28
 42a:	31 96       	adiw	r30, 0x01	; 1
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <ServicedTasks+0x28>
 434:	ca 01       	movw	r24, r20
 436:	0e 94 96 01 	call	0x32c	; 0x32c <initStackForTask>
 43a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_end+0x301>
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_end+0x301>
 444:	60 96       	adiw	r28, 0x10	; 16
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <main>:
 45a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <semiphoreSetup>
 45e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <clrRam>
 462:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
 466:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_end+0x301>
 46a:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 46e:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 472:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_end+0x305>
 476:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_end+0x306>
 47a:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_end+0x307>
 47e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 482:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 486:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 48a:	87 b1       	in	r24, 0x07	; 7
 48c:	89 60       	ori	r24, 0x09	; 9
 48e:	87 b9       	out	0x07, r24	; 7
 490:	84 b1       	in	r24, 0x04	; 4
 492:	8f 62       	ori	r24, 0x2F	; 47
 494:	84 b9       	out	0x04, r24	; 4
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	8a b9       	out	0x0a, r24	; 10
 49a:	6b 9a       	sbi	0x0d, 3	; 13
 49c:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 4a0:	60 e1       	ldi	r22, 0x10	; 16
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	8c e6       	ldi	r24, 0x6C	; 108
 4a6:	92 e0       	ldi	r25, 0x02	; 2
 4a8:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4ac:	60 e1       	ldi	r22, 0x10	; 16
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	8f e1       	ldi	r24, 0x1F	; 31
 4b2:	93 e0       	ldi	r25, 0x03	; 3
 4b4:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4b8:	60 e1       	ldi	r22, 0x10	; 16
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	83 ed       	ldi	r24, 0xD3	; 211
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4c4:	0e 94 83 01 	call	0x306	; 0x306 <tickTimerSetup>
 4c8:	0e 94 a2 00 	call	0x144	; 0x144 <LOADSTATE>
 4cc:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 4d6:	fa cf       	rjmp	.-12     	; 0x4cc <main+0x72>

000004d8 <taskScheduler>:
 4d8:	c1 e0       	ldi	r28, 0x01	; 1
 4da:	d0 e0       	ldi	r29, 0x00	; 0
 4dc:	f8 94       	cli
 4de:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 4e2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 4e6:	80 31       	cpi	r24, 0x10	; 16
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <taskScheduler+0x14>
 4ea:	6e c0       	rjmp	.+220    	; 0x5c8 <taskScheduler+0xf0>
 4ec:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 4f0:	80 e1       	ldi	r24, 0x10	; 16
 4f2:	e8 9f       	mul	r30, r24
 4f4:	f0 01       	movw	r30, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	e0 50       	subi	r30, 0x00	; 0
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	86 81       	ldd	r24, Z+6	; 0x06
 4fe:	97 81       	ldd	r25, Z+7	; 0x07
 500:	02 97       	sbiw	r24, 0x02	; 2
 502:	e9 f5       	brne	.+122    	; 0x57e <taskScheduler+0xa6>
 504:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <_end+0x303>
 508:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <_end+0x304>
 50c:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <_end+0x305>
 510:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_end+0x306>
 514:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <_end+0x307>
 518:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <_end+0x308>
 51c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_end+0x309>
 520:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_end+0x30a>
 524:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 528:	a0 e1       	ldi	r26, 0x10	; 16
 52a:	ea 9f       	mul	r30, r26
 52c:	f0 01       	movw	r30, r0
 52e:	11 24       	eor	r1, r1
 530:	e0 50       	subi	r30, 0x00	; 0
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	04 85       	ldd	r16, Z+12	; 0x0c
 536:	15 85       	ldd	r17, Z+13	; 0x0d
 538:	0e 94 38 03 	call	0x670	; 0x670 <__lshrdi3>
 53c:	21 70       	andi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	a0 e0       	ldi	r26, 0x00	; 0
 54e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__cmpdi2_s8>
 552:	81 f1       	breq	.+96     	; 0x5b4 <taskScheduler+0xdc>
 554:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	e8 9f       	mul	r30, r24
 55c:	f0 01       	movw	r30, r0
 55e:	11 24       	eor	r1, r1
 560:	e0 50       	subi	r30, 0x00	; 0
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	15 86       	std	Z+13, r1	; 0x0d
 566:	14 86       	std	Z+12, r1	; 0x0c
 568:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 56c:	a0 e1       	ldi	r26, 0x10	; 16
 56e:	ea 9f       	mul	r30, r26
 570:	f0 01       	movw	r30, r0
 572:	11 24       	eor	r1, r1
 574:	e0 50       	subi	r30, 0x00	; 0
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	17 82       	std	Z+7, r1	; 0x07
 57a:	16 82       	std	Z+6, r1	; 0x06
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <taskScheduler+0xdc>
 57e:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 582:	80 e1       	ldi	r24, 0x10	; 16
 584:	e8 9f       	mul	r30, r24
 586:	f0 01       	movw	r30, r0
 588:	11 24       	eor	r1, r1
 58a:	e0 50       	subi	r30, 0x00	; 0
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	86 81       	ldd	r24, Z+6	; 0x06
 590:	97 81       	ldd	r25, Z+7	; 0x07
 592:	89 2b       	or	r24, r25
 594:	79 f4       	brne	.+30     	; 0x5b4 <taskScheduler+0xdc>
 596:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 96 01 	call	0x32c	; 0x32c <initStackForTask>
 5a0:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 5a4:	a0 e1       	ldi	r26, 0x10	; 16
 5a6:	ea 9f       	mul	r30, r26
 5a8:	f0 01       	movw	r30, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	e0 50       	subi	r30, 0x00	; 0
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	d7 83       	std	Z+7, r29	; 0x07
 5b2:	c6 83       	std	Z+6, r28	; 0x06
 5b4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 5be:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 5c2:	80 31       	cpi	r24, 0x10	; 16
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <taskScheduler+0xf0>
 5c6:	92 cf       	rjmp	.-220    	; 0x4ec <taskScheduler+0x14>
 5c8:	78 94       	sei
 5ca:	88 cf       	rjmp	.-240    	; 0x4dc <taskScheduler+0x4>

000005cc <incrementTask>:
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	c0 91 01 04 	lds	r28, 0x0401	; 0x800401 <_end+0x301>
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_end+0x300>
 5da:	82 2f       	mov	r24, r18
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	be 01       	movw	r22, r28
 5e2:	0e 94 22 03 	call	0x644	; 0x644 <__divmodhi4>
 5e6:	28 2f       	mov	r18, r24
 5e8:	99 27       	eor	r25, r25
 5ea:	fc 01       	movw	r30, r24
 5ec:	e2 95       	swap	r30
 5ee:	f2 95       	swap	r31
 5f0:	f0 7f       	andi	r31, 0xF0	; 240
 5f2:	fe 27       	eor	r31, r30
 5f4:	e0 7f       	andi	r30, 0xF0	; 240
 5f6:	fe 27       	eor	r31, r30
 5f8:	e0 50       	subi	r30, 0x00	; 0
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	42 81       	ldd	r20, Z+2	; 0x02
 5fe:	53 81       	ldd	r21, Z+3	; 0x03
 600:	45 2b       	or	r20, r21
 602:	59 f3       	breq	.-42     	; 0x5da <incrementTask+0xe>
 604:	82 95       	swap	r24
 606:	92 95       	swap	r25
 608:	90 7f       	andi	r25, 0xF0	; 240
 60a:	98 27       	eor	r25, r24
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	98 27       	eor	r25, r24
 610:	fc 01       	movw	r30, r24
 612:	e0 50       	subi	r30, 0x00	; 0
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	86 81       	ldd	r24, Z+6	; 0x06
 618:	97 81       	ldd	r25, Z+7	; 0x07
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f6       	brne	.-68     	; 0x5da <incrementTask+0xe>
 61e:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <_end+0x300>
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <yieldReady>:
}

void yieldReady(){
	taskArray[taskCounter].state = READY; 
 628:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_end+0x300>
 62c:	80 e1       	ldi	r24, 0x10	; 16
 62e:	e8 9f       	mul	r30, r24
 630:	f0 01       	movw	r30, r0
 632:	11 24       	eor	r1, r1
 634:	e0 50       	subi	r30, 0x00	; 0
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	17 82       	std	Z+7, r1	; 0x07
 63a:	16 82       	std	Z+6, r1	; 0x06
 63c:	ff cf       	rjmp	.-2      	; 0x63c <yieldReady+0x14>

0000063e <blinkyTaskFunction>:
		sei();
	}
}

void blinkyTaskFunction(){
		PORTB |= 1 << 5;
 63e:	2d 9a       	sbi	0x05, 5	; 5
		yieldReady(); 
 640:	0e 94 14 03 	call	0x628	; 0x628 <yieldReady>

00000644 <__divmodhi4>:
 644:	97 fb       	bst	r25, 7
 646:	07 2e       	mov	r0, r23
 648:	16 f4       	brtc	.+4      	; 0x64e <__divmodhi4+0xa>
 64a:	00 94       	com	r0
 64c:	07 d0       	rcall	.+14     	; 0x65c <__divmodhi4_neg1>
 64e:	77 fd       	sbrc	r23, 7
 650:	09 d0       	rcall	.+18     	; 0x664 <__divmodhi4_neg2>
 652:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__udivmodhi4>
 656:	07 fc       	sbrc	r0, 7
 658:	05 d0       	rcall	.+10     	; 0x664 <__divmodhi4_neg2>
 65a:	3e f4       	brtc	.+14     	; 0x66a <__divmodhi4_exit>

0000065c <__divmodhi4_neg1>:
 65c:	90 95       	com	r25
 65e:	81 95       	neg	r24
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__divmodhi4_neg2>:
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255

0000066a <__divmodhi4_exit>:
 66a:	08 95       	ret

0000066c <__ashrdi3>:
 66c:	97 fb       	bst	r25, 7
 66e:	10 f8       	bld	r1, 0

00000670 <__lshrdi3>:
 670:	16 94       	lsr	r1
 672:	00 08       	sbc	r0, r0
 674:	0f 93       	push	r16
 676:	08 30       	cpi	r16, 0x08	; 8
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__lshrdi3+0x30>
 67a:	08 50       	subi	r16, 0x08	; 8
 67c:	23 2f       	mov	r18, r19
 67e:	34 2f       	mov	r19, r20
 680:	45 2f       	mov	r20, r21
 682:	56 2f       	mov	r21, r22
 684:	67 2f       	mov	r22, r23
 686:	78 2f       	mov	r23, r24
 688:	89 2f       	mov	r24, r25
 68a:	90 2d       	mov	r25, r0
 68c:	f4 cf       	rjmp	.-24     	; 0x676 <__lshrdi3+0x6>
 68e:	05 94       	asr	r0
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	57 95       	ror	r21
 69a:	47 95       	ror	r20
 69c:	37 95       	ror	r19
 69e:	27 95       	ror	r18
 6a0:	0a 95       	dec	r16
 6a2:	aa f7       	brpl	.-22     	; 0x68e <__lshrdi3+0x1e>
 6a4:	0f 91       	pop	r16
 6a6:	08 95       	ret

000006a8 <__cmpdi2_s8>:
 6a8:	00 24       	eor	r0, r0
 6aa:	a7 fd       	sbrc	r26, 7
 6ac:	00 94       	com	r0
 6ae:	2a 17       	cp	r18, r26
 6b0:	30 05       	cpc	r19, r0
 6b2:	40 05       	cpc	r20, r0
 6b4:	50 05       	cpc	r21, r0
 6b6:	60 05       	cpc	r22, r0
 6b8:	70 05       	cpc	r23, r0
 6ba:	80 05       	cpc	r24, r0
 6bc:	90 05       	cpc	r25, r0
 6be:	08 95       	ret

000006c0 <__udivmodhi4>:
 6c0:	aa 1b       	sub	r26, r26
 6c2:	bb 1b       	sub	r27, r27
 6c4:	51 e1       	ldi	r21, 0x11	; 17
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <__udivmodhi4_ep>

000006c8 <__udivmodhi4_loop>:
 6c8:	aa 1f       	adc	r26, r26
 6ca:	bb 1f       	adc	r27, r27
 6cc:	a6 17       	cp	r26, r22
 6ce:	b7 07       	cpc	r27, r23
 6d0:	10 f0       	brcs	.+4      	; 0x6d6 <__udivmodhi4_ep>
 6d2:	a6 1b       	sub	r26, r22
 6d4:	b7 0b       	sbc	r27, r23

000006d6 <__udivmodhi4_ep>:
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	5a 95       	dec	r21
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <__udivmodhi4_loop>
 6de:	80 95       	com	r24
 6e0:	90 95       	com	r25
 6e2:	bc 01       	movw	r22, r24
 6e4:	cd 01       	movw	r24, r26
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
