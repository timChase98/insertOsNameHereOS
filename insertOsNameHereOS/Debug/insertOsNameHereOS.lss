
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b88  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dc  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000452  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_42>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  d4:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <os>:


 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  dc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  de:	08 95       	ret

000000e0 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the status of the processor
  PUSH R0;
  e0:	0f 92       	push	r0
         ; R1 is zero and doenst need to be saved
  IN R1, _SFR_IO_ADDR(SREG); save the status register
  e2:	1f b6       	in	r1, 0x3f	; 63
  PUSH R1
  e4:	1f 92       	push	r1
  PUSH R16
  e6:	0f 93       	push	r16
  PUSH R17
  e8:	1f 93       	push	r17
  PUSH R18
  ea:	2f 93       	push	r18
  PUSH ZL; save the Z register
  ec:	ef 93       	push	r30
  PUSH ZH
  ee:	ff 93       	push	r31

  ; stack grows downward. to get something from from 4 pushes ago add 4 to SP
  IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
  f0:	ed b7       	in	r30, 0x3d	; 61
  IN ZH, _SFR_IO_ADDR(SPH);  
  f2:	fe b7       	in	r31, 0x3e	; 62
  ADIW Z, 8; points to SP - 8, pushed PC from before call to interrupt
  f4:	38 96       	adiw	r30, 0x08	; 8
  LD R0, Z+; get low byte and increment
  f6:	01 90       	ld	r0, Z+
  LD R1, Z; get high byte
  f8:	10 80       	ld	r1, Z
  PUSH R1; save the PC 
  fa:	1f 92       	push	r1
  PUSH R0
  fc:	0f 92       	push	r0
  PUSH ZH; save the stack pointer 
  fe:	ff 93       	push	r31
  PUSH ZL
 100:	ef 93       	push	r30

  ; get the Task Counter 
  LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register  
 102:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H 
 104:	f4 e0       	ldi	r31, 0x04	; 4
  LD R17, Z+; get task counter
 106:	11 91       	ld	r17, Z+
  LD R18, Z; get number of tasks 
 108:	20 81       	ld	r18, Z
  SBIW Z, 1; point back to task counter
 10a:	31 97       	sbiw	r30, 0x01	; 1


  ; calculate address of current task structure
  LDI R16, 16
 10c:	00 e1       	ldi	r16, 0x10	; 16
  MUL R17, R16; multiply task counter by 16 and put the result in R0 
 10e:	10 9f       	mul	r17, r16
  INC R17; increment task counter
 110:	13 95       	inc	r17
  CP R17, R18
 112:	12 17       	cp	r17, r18
  BRLO TaskNotOverflowed ; brach if lower 
 114:	08 f0       	brcs	.+2      	; 0x118 <TaskNotOverflowed>
  CLR R17
 116:	11 27       	eor	r17, r17

00000118 <TaskNotOverflowed>:
  TaskNotOverflowed:  

  ST Z, R17
 118:	10 83       	st	Z, r17

  LDI ZL, STARTOFTASKLIST_L + 10; stack pointer address in task list 
 11a:	ea e0       	ldi	r30, 0x0A	; 10
  LDI ZH, STARTOFTASKLIST_H
 11c:	f1 e0       	ldi	r31, 0x01	; 1
  ; task counter to offset 
  ADD ZL, R0;
 11e:	e0 0d       	add	r30, r0
  CLR R0;
 120:	00 24       	eor	r0, r0
  ADC ZH, R0; does a 16bit add correct address now in Z register 
 122:	f0 1d       	adc	r31, r0
  
  POP R0; low byte of SP 
 124:	0f 90       	pop	r0
  ST Z+, R0
 126:	01 92       	st	Z+, r0
  POP R0 ; high byte of SP 
 128:	0f 90       	pop	r0
  ST Z+, R0
 12a:	01 92       	st	Z+, r0
  POP R0 ; low byte of PC
 12c:	0f 90       	pop	r0
  ST Z+, R0
 12e:	01 92       	st	Z+, r0
  POP R0 ; high byte of PC 
 130:	0f 90       	pop	r0
  ST Z+, R0
 132:	01 92       	st	Z+, r0


  ; Restore registers
  POP ZH
 134:	ff 91       	pop	r31
  POP ZL
 136:	ef 91       	pop	r30
  POP R18
 138:	2f 91       	pop	r18
  POP R17
 13a:	1f 91       	pop	r17
  POP R16
 13c:	0f 91       	pop	r16
  POP R1; get SREG from stack 
 13e:	1f 90       	pop	r1
  OUT _SFR_IO_ADDR(SREG), R1
 140:	1f be       	out	0x3f, r1	; 63
  CLR R1; clear R1 to 0 
 142:	11 24       	eor	r1, r1
  POP R0
 144:	0f 90       	pop	r0
  reti
 146:	18 95       	reti

00000148 <blinkyTaskFunction>:
	numberOfTasks++;// increment total number of tasks 
}


void blinkyTaskFunction(){
	PINB |= 1 << 5; 
 148:	1d 9a       	sbi	0x03, 5	; 3
 14a:	08 95       	ret

0000014c <tickTimerSetup>:
		i++;
    }
}

void tickTimerSetup(){
	TCCR4A = 0;
 14c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			// ctc mode		// clk / 8
	TCCR4B = (1 << WGM42) | (0b010 << CS40) ;
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	OCR4A = TIMER_TICK_TIME_LOAD_VALUE; 
 156:	80 ed       	ldi	r24, 0xD0	; 208
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 15e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	TIMSK4 = 1 << OCIE4A; 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 168:	08 95       	ret

0000016a <createTask>:
}

void createTask(void (*taskF)(void)){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	2d 97       	sbiw	r28, 0x0d	; 13
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	ac 01       	movw	r20, r24
	Task t = taskArray[numberOfTasks]; // get memory for task
 180:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <__bss_end+0x300>
 184:	69 2f       	mov	r22, r25
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	98 9f       	mul	r25, r24
 18c:	90 01       	movw	r18, r0
 18e:	11 24       	eor	r1, r1
 190:	20 50       	subi	r18, 0x00	; 0
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	f9 01       	movw	r30, r18
 198:	de 01       	movw	r26, r28
 19a:	11 96       	adiw	r26, 0x01	; 1
 19c:	01 90       	ld	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	8a 95       	dec	r24
 1a2:	e1 f7       	brne	.-8      	; 0x19c <createTask+0x32>
	t.taskFunction = taskF;
	//t.isTaskReady = taskReady;
	t.state = WAITING; 
	t.programCounter = taskF;
	
	taskArray[numberOfTasks] = t;
 1a4:	7a 83       	std	Y+2, r23	; 0x02
 1a6:	69 83       	std	Y+1, r22	; 0x01
 1a8:	5c 83       	std	Y+4, r21	; 0x04
 1aa:	4b 83       	std	Y+3, r20	; 0x03
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8f 83       	std	Y+7, r24	; 0x07
 1b0:	5b 87       	std	Y+11, r21	; 0x0b
 1b2:	4a 87       	std	Y+10, r20	; 0x0a
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	fe 01       	movw	r30, r28
 1b8:	31 96       	adiw	r30, 0x01	; 1
 1ba:	d9 01       	movw	r26, r18
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	8a 95       	dec	r24
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <createTask+0x52>
	
	numberOfTasks++;// increment total number of tasks 
 1c4:	9f 5f       	subi	r25, 0xFF	; 255
 1c6:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__bss_end+0x300>
}
 1ca:	2d 96       	adiw	r28, 0x0d	; 13
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:

volatile uint8_t i = 0; 

int main(void)
{
	taskCounter = 0;
 1dc:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <__bss_end+0x2ff>
	numberOfTasks = 0; 
 1e0:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <__bss_end+0x300>
	DDRE |= 1 << 0;		// heartbeat pin
 1e4:	68 9a       	sbi	0x0d, 0	; 13
	DDRB |= 1 << 5;
 1e6:	25 9a       	sbi	0x04, 5	; 4
	
	
	
	tickTimerSetup();
 1e8:	0e 94 a6 00 	call	0x14c	; 0x14c <tickTimerSetup>
	sei();
 1ec:	78 94       	sei
	
	createTask(blinkyTaskFunction); 
 1ee:	84 ea       	ldi	r24, 0xA4	; 164
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 b5 00 	call	0x16a	; 0x16a <createTask>
	
    /* Replace with your application code */
    while (1) 
    {
		i++;
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <main+0x1a>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
