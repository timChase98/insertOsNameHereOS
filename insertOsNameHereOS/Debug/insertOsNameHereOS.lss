
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000298  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcd  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033d  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bd  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_42>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  d4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <os>:


 .global os
os:
	
	sbi _SFR_IO_ADDR(PINB), 5
  dc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  de:	08 95       	ret

000000e0 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
	pop R18;  get PC from stack 
  e0:	2f 91       	pop	r18
	pop R19
  e2:	3f 91       	pop	r19
	sbi		 _SFR_IO_ADDR(PINE),0				;toggle PE.0
  e4:	60 9a       	sbi	0x0c, 0	; 12
	


    reti										;and done
  e6:	18 95       	reti

000000e8 <blinkyTaskFunction>:
	numberOfTasks++;// increment total number of tasks 
}


void blinkyTaskFunction(){
	PINB |= 1 << 5; 
  e8:	1d 9a       	sbi	0x03, 5	; 3
  ea:	08 95       	ret

000000ec <blinkyTaskIsReady>:
}

uint8_t blinkyTaskIsReady(){
	return 1; 
	
}
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <tickTimerSetup>:
		i = i + 1;
    }
}

void tickTimerSetup(){
	TCCR4A = 0;
  f0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			// ctc mode		// clk / 8
	TCCR4B = (1 << WGM42) | (0b010 << CS40) ;
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
	OCR4A = TIMER_TICK_TIME_LOAD_VALUE; 
  fa:	80 ed       	ldi	r24, 0xD0	; 208
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 102:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	TIMSK4 = 1 << OCIE4A; 
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 10c:	08 95       	ret

0000010e <createTask>:
}

void createTask(void (*taskF)(void), uint8_t (*taskReady)(void)){
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	2d 97       	sbiw	r28, 0x0d	; 13
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	ac 01       	movw	r20, r24
	Task t = taskArray[numberOfTasks]; // get memory for task
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <numberOfTasks>
 12c:	09 2f       	mov	r16, r25
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	98 9f       	mul	r25, r24
 134:	90 01       	movw	r18, r0
 136:	11 24       	eor	r1, r1
 138:	20 50       	subi	r18, 0x00	; 0
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	f9 01       	movw	r30, r18
 140:	de 01       	movw	r26, r28
 142:	11 96       	adiw	r26, 0x01	; 1
 144:	01 90       	ld	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	8a 95       	dec	r24
 14a:	e1 f7       	brne	.-8      	; 0x144 <createTask+0x36>
	t.taskFunction = taskF;
	t.isTaskReady = taskReady;
	t.state = WAITING; 
	t.programCounter = taskF;
	
	taskArray[numberOfTasks] = t;
 14c:	1a 83       	std	Y+2, r17	; 0x02
 14e:	09 83       	std	Y+1, r16	; 0x01
 150:	5c 83       	std	Y+4, r21	; 0x04
 152:	4b 83       	std	Y+3, r20	; 0x03
 154:	7e 83       	std	Y+6, r23	; 0x06
 156:	6d 83       	std	Y+5, r22	; 0x05
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	8f 83       	std	Y+7, r24	; 0x07
 15c:	5b 87       	std	Y+11, r21	; 0x0b
 15e:	4a 87       	std	Y+10, r20	; 0x0a
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	fe 01       	movw	r30, r28
 164:	31 96       	adiw	r30, 0x01	; 1
 166:	d9 01       	movw	r26, r18
 168:	01 90       	ld	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	8a 95       	dec	r24
 16e:	e1 f7       	brne	.-8      	; 0x168 <createTask+0x5a>
	
	numberOfTasks++;// increment total number of tasks 
 170:	9f 5f       	subi	r25, 0xFF	; 255
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <numberOfTasks>
}
 176:	2d 96       	adiw	r28, 0x0d	; 13
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <main>:

volatile uint8_t i = 0; 

int main(void)
{
	DDRE |= 1 << 0;		// heartbeat pin
 18c:	68 9a       	sbi	0x0d, 0	; 13
	DDRB |= 1 << 5;
 18e:	25 9a       	sbi	0x04, 5	; 4
	
	
	
	tickTimerSetup();
 190:	0e 94 78 00 	call	0xf0	; 0xf0 <tickTimerSetup>
	sei();
 194:	78 94       	sei
	
	createTask(blinkyTaskFunction, blinkyTaskIsReady); 
 196:	66 e7       	ldi	r22, 0x76	; 118
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	84 e7       	ldi	r24, 0x74	; 116
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 87 00 	call	0x10e	; 0x10e <createTask>
	
    /* Replace with your application code */
    while (1) 
    {
		i = i + 1;
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <main+0x16>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
