
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000007d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa7  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b16  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a18  00000000  00000000  0000237d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c8  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000437  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_3>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_27>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_42>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  c4:	0c 94 85 03 	jmp	0x70a	; 0x70a <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <os>:


 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  cc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  ce:	08 95       	ret

000000d0 <yield>:

.global yield
yield:
  JMP yield ; Spin.  This should do something more usefull later
  d0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <yield>

000000d4 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the registers
	IN R1, _SFR_IO_ADDR(SREG); R1 is zero and doesnt need to be saved 
  d4:	1f b6       	in	r1, 0x3f	; 63
	PUSH R31
  d6:	ff 93       	push	r31
	PUSH R30
  d8:	ef 93       	push	r30
	PUSH R29
  da:	df 93       	push	r29
	PUSH R28
  dc:	cf 93       	push	r28
	PUSH R27
  de:	bf 93       	push	r27
	PUSH R26
  e0:	af 93       	push	r26
	PUSH R25
  e2:	9f 93       	push	r25
	PUSH R24
  e4:	8f 93       	push	r24
	PUSH R23
  e6:	7f 93       	push	r23
	PUSH R22
  e8:	6f 93       	push	r22
	PUSH R21
  ea:	5f 93       	push	r21
	PUSH R20
  ec:	4f 93       	push	r20
	PUSH R19
  ee:	3f 93       	push	r19
	PUSH R18
  f0:	2f 93       	push	r18
	PUSH R17
  f2:	1f 93       	push	r17
	PUSH R16
  f4:	0f 93       	push	r16
	PUSH R15
  f6:	ff 92       	push	r15
	PUSH R14
  f8:	ef 92       	push	r14
	PUSH R13
  fa:	df 92       	push	r13
	PUSH R12
  fc:	cf 92       	push	r12
	PUSH R11
  fe:	bf 92       	push	r11
	PUSH R10
 100:	af 92       	push	r10
	PUSH R9
 102:	9f 92       	push	r9
	PUSH R8
 104:	8f 92       	push	r8
	PUSH R7
 106:	7f 92       	push	r7
	PUSH R6
 108:	6f 92       	push	r6
	PUSH R5
 10a:	5f 92       	push	r5
	PUSH R4
 10c:	4f 92       	push	r4
	PUSH R3
 10e:	3f 92       	push	r3
	PUSH R2
 110:	2f 92       	push	r2
	PUSH R1
 112:	1f 92       	push	r1
	PUSH R0
 114:	0f 92       	push	r0

  ; get the Task Counter into R17 and number of tasks into R18
    LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register
 116:	e0 e0       	ldi	r30, 0x00	; 0
    LDI ZH, TASKCOUNTERADDR_H
 118:	f4 e0       	ldi	r31, 0x04	; 4
    LD R17, Z+; get task counter
 11a:	11 91       	ld	r17, Z+
    LD R18, Z; get number of tasks
 11c:	20 81       	ld	r18, Z

  ; get the stack pointer
    IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
 11e:	ed b7       	in	r30, 0x3d	; 61
    IN ZH, _SFR_IO_ADDR(SPH);
 120:	fe b7       	in	r31, 0x3e	; 62
    PUSH ZH; save the stack pointer
 122:	ff 93       	push	r31
    PUSH ZL
 124:	ef 93       	push	r30


  ; calculate address of current task structure
    LDI R16, 16
 126:	00 e1       	ldi	r16, 0x10	; 16
    MUL R17, R16; multiply task counter by 16 and put the result in R0
 128:	10 9f       	mul	r17, r16
    LDI ZL, STARTOFTASKLIST_L + 8; stack pointer address in task list
 12a:	e8 e0       	ldi	r30, 0x08	; 8
    LDI ZH, STARTOFTASKLIST_H
 12c:	f1 e0       	ldi	r31, 0x01	; 1
    ; task counter to offset
    ADD ZL, R0;
 12e:	e0 0d       	add	r30, r0
    ADC ZH, R1; does a 16bit add correct address now in Z register
 130:	f1 1d       	adc	r31, r1

  ; save stack pointer and program counter to task structure memeory
    POP R0; low byte of SP
 132:	0f 90       	pop	r0
	POP R1; high byte of SP 
 134:	1f 90       	pop	r1
    ST Z+, R0
 136:	01 92       	st	Z+, r0
    ST Z+, R1
 138:	11 92       	st	Z+, r1

  call incrementTask
 13a:	0e 94 01 03 	call	0x602	; 0x602 <incrementTask>
;   INC R17; increment task counter
;  CP R17, R18
;  BRLO TaskNotOverflowed ; brach if lower
;  CLR R17; if taskCounter >= numberOfTasks reset to task 0
;  TaskNotOverflowed:
  LDI ZL, TASKCOUNTERADDR_L
 13e:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H
 140:	f4 e0       	ldi	r31, 0x04	; 4
  LD R17, Z
 142:	10 81       	ld	r17, Z

00000144 <LOADSTATE>:
  ; its not its part of the ISR but this should magically fix things 
  .global LOADSTATE
  LOADSTATE:
  ; Load saved state
    ; get saved SP
      LDI R16, 16
 144:	00 e1       	ldi	r16, 0x10	; 16
      MUL R17, R16; multiply task counter by 16 and put the result in R0
 146:	10 9f       	mul	r17, r16
      LDI ZL, STARTOFTASKLIST_L + 8; program counter address in task list
 148:	e8 e0       	ldi	r30, 0x08	; 8
      LDI ZH, STARTOFTASKLIST_H
 14a:	f1 e0       	ldi	r31, 0x01	; 1
      ; task counter to offset
      ADD ZL, R0;
 14c:	e0 0d       	add	r30, r0
      ADC ZH, R1; does a 16bit add correct address now in Z register
 14e:	f1 1d       	adc	r31, r1
      LD R0, Z+; SPL
 150:	01 90       	ld	r0, Z+
      PUSH R0
 152:	0f 92       	push	r0
      LD R0, Z; SPH
 154:	00 80       	ld	r0, Z
      PUSH R0
 156:	0f 92       	push	r0


    ; restore stack pointer 
      POP R1; SPH
 158:	1f 90       	pop	r1
      POP R0; SPL
 15a:	0f 90       	pop	r0
      OUT _SFR_IO_ADDR(SPH), R1
 15c:	1e be       	out	0x3e, r1	; 62
      OUT _SFR_IO_ADDR(SPL), R0
 15e:	0d be       	out	0x3d, r0	; 61
      

	POP R0
 160:	0f 90       	pop	r0
	POP R1
 162:	1f 90       	pop	r1
	OUT _SFR_IO_ADDR(SREG), R1; put the Status register back 
 164:	1f be       	out	0x3f, r1	; 63
	POP R2
 166:	2f 90       	pop	r2
	POP R3
 168:	3f 90       	pop	r3
	POP R4
 16a:	4f 90       	pop	r4
	POP R5
 16c:	5f 90       	pop	r5
	POP R6
 16e:	6f 90       	pop	r6
	POP R7
 170:	7f 90       	pop	r7
	POP R8
 172:	8f 90       	pop	r8
	POP R9
 174:	9f 90       	pop	r9
	POP R10
 176:	af 90       	pop	r10
	POP R11
 178:	bf 90       	pop	r11
	POP R12
 17a:	cf 90       	pop	r12
	POP R13
 17c:	df 90       	pop	r13
	POP R14
 17e:	ef 90       	pop	r14
	POP R15
 180:	ff 90       	pop	r15
	POP R16
 182:	0f 91       	pop	r16
	POP R17
 184:	1f 91       	pop	r17
	POP R18
 186:	2f 91       	pop	r18
	POP R19
 188:	3f 91       	pop	r19
	POP R20
 18a:	4f 91       	pop	r20
	POP R21
 18c:	5f 91       	pop	r21
	POP R22
 18e:	6f 91       	pop	r22
	POP R23
 190:	7f 91       	pop	r23
	POP R24
 192:	8f 91       	pop	r24
	POP R25
 194:	9f 91       	pop	r25
	POP R26
 196:	af 91       	pop	r26
	POP R27
 198:	bf 91       	pop	r27
	POP R28
 19a:	cf 91       	pop	r28
	POP R29
 19c:	df 91       	pop	r29
	POP R30
 19e:	ef 91       	pop	r30
	POP R31
 1a0:	ff 91       	pop	r31
	CLR R1
 1a2:	11 24       	eor	r1, r1
    ; PC shoudld be on stack

  reti
 1a4:	18 95       	reti

000001a6 <blinkyTask2Function>:

}

void getSemi(uint8_t s){
	taskArray[taskCounter].state = WAITING;
	taskArray[taskCounter].waitingFor = s;
 1a6:	2d 98       	cbi	0x05, 5	; 5
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <blinkyTask2Function>

000001aa <semiphoreSetup>:
 1aa:	89 e0       	ldi	r24, 0x09	; 9
 1ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 1b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1ba:	08 95       	ret

000001bc <__vector_3>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	18 9b       	sbis	0x03, 0	; 3
 1d8:	22 c0       	rjmp	.+68     	; 0x21e <__vector_3+0x62>
 1da:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_end+0x308>
 1de:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <_end+0x309>
 1e2:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <_end+0x30a>
 1e6:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <_end+0x30b>
 1ea:	40 91 0c 04 	lds	r20, 0x040C	; 0x80040c <_end+0x30c>
 1ee:	30 91 0d 04 	lds	r19, 0x040D	; 0x80040d <_end+0x30d>
 1f2:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <_end+0x30e>
 1f6:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_end+0x30f>
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_end+0x308>
 200:	70 93 09 04 	sts	0x0409, r23	; 0x800409 <_end+0x309>
 204:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <_end+0x30a>
 208:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <_end+0x30b>
 20c:	40 93 0c 04 	sts	0x040C, r20	; 0x80040c <_end+0x30c>
 210:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <_end+0x30d>
 214:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <_end+0x30e>
 218:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_end+0x30f>
 21c:	10 c0       	rjmp	.+32     	; 0x23e <__vector_3+0x82>
 21e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 222:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 226:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 22a:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_end+0x30b>
 22e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <_end+0x30c>
 232:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <_end+0x30d>
 236:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <_end+0x30e>
 23a:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_end+0x30f>
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_27>:
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	60 99       	sbic	0x0c, 0	; 12
 274:	22 c0       	rjmp	.+68     	; 0x2ba <__vector_27+0x62>
 276:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_end+0x308>
 27a:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <_end+0x309>
 27e:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <_end+0x30a>
 282:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <_end+0x30b>
 286:	40 91 0c 04 	lds	r20, 0x040C	; 0x80040c <_end+0x30c>
 28a:	30 91 0d 04 	lds	r19, 0x040D	; 0x80040d <_end+0x30d>
 28e:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <_end+0x30e>
 292:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_end+0x30f>
 296:	80 61       	ori	r24, 0x10	; 16
 298:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_end+0x308>
 29c:	70 93 09 04 	sts	0x0409, r23	; 0x800409 <_end+0x309>
 2a0:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <_end+0x30a>
 2a4:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <_end+0x30b>
 2a8:	40 93 0c 04 	sts	0x040C, r20	; 0x80040c <_end+0x30c>
 2ac:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <_end+0x30d>
 2b0:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <_end+0x30e>
 2b4:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_end+0x30f>
 2b8:	10 c0       	rjmp	.+32     	; 0x2da <__vector_27+0x82>
 2ba:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 2be:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 2c2:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 2c6:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_end+0x30b>
 2ca:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <_end+0x30c>
 2ce:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <_end+0x30d>
 2d2:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <_end+0x30e>
 2d6:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_end+0x30f>
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <clrRam>:
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	11 92       	st	Z+, r1
 2fa:	11 92       	st	Z+, r1
 2fc:	e1 15       	cp	r30, r1
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	f8 07       	cpc	r31, r24
 302:	d1 f7       	brne	.-12     	; 0x2f8 <clrRam+0x4>
 304:	08 95       	ret

00000306 <tickTimerSetup>:
 306:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 310:	88 ec       	ldi	r24, 0xC8	; 200
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 318:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 322:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 326:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 32a:	08 95       	ret

0000032c <initStackForTask>:
 32c:	9c 01       	movw	r18, r24
 32e:	00 24       	eor	r0, r0
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	07 94       	ror	r0
 336:	36 95       	lsr	r19
 338:	27 95       	ror	r18
 33a:	07 94       	ror	r0
 33c:	32 2f       	mov	r19, r18
 33e:	20 2d       	mov	r18, r0
 340:	a9 01       	movw	r20, r18
 342:	43 5e       	subi	r20, 0xE3	; 227
 344:	5b 4f       	sbci	r21, 0xFB	; 251
 346:	82 95       	swap	r24
 348:	92 95       	swap	r25
 34a:	90 7f       	andi	r25, 0xF0	; 240
 34c:	98 27       	eor	r25, r24
 34e:	80 7f       	andi	r24, 0xF0	; 240
 350:	98 27       	eor	r25, r24
 352:	fc 01       	movw	r30, r24
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	51 87       	std	Z+9, r21	; 0x09
 35a:	40 87       	std	Z+8, r20	; 0x08
 35c:	82 81       	ldd	r24, Z+2	; 0x02
 35e:	93 81       	ldd	r25, Z+3	; 0x03
 360:	f9 01       	movw	r30, r18
 362:	e2 5c       	subi	r30, 0xC2	; 194
 364:	fb 4f       	sbci	r31, 0xFB	; 251
 366:	90 83       	st	Z, r25
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	08 95       	ret

0000036c <createTask>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	60 97       	sbiw	r28, 0x10	; 16
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	8c 01       	movw	r16, r24
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	e0 e0       	ldi	r30, 0x00	; 0
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	de 01       	movw	r26, r28
 38e:	11 96       	adiw	r26, 0x01	; 1
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <createTask+0x24>
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	9c 81       	ldd	r25, Y+4	; 0x04
 39c:	89 2b       	or	r24, r25
 39e:	c9 f0       	breq	.+50     	; 0x3d2 <createTask+0x66>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	42 2f       	mov	r20, r18
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	fa 01       	movw	r30, r20
 3aa:	e2 95       	swap	r30
 3ac:	f2 95       	swap	r31
 3ae:	f0 7f       	andi	r31, 0xF0	; 240
 3b0:	fe 27       	eor	r31, r30
 3b2:	e0 7f       	andi	r30, 0xF0	; 240
 3b4:	fe 27       	eor	r31, r30
 3b6:	e0 50       	subi	r30, 0x00	; 0
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	90 e1       	ldi	r25, 0x10	; 16
 3bc:	de 01       	movw	r26, r28
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	9a 95       	dec	r25
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <createTask+0x54>
 3c8:	eb 81       	ldd	r30, Y+3	; 0x03
 3ca:	fc 81       	ldd	r31, Y+4	; 0x04
 3cc:	ef 2b       	or	r30, r31
 3ce:	49 f7       	brne	.-46     	; 0x3a2 <createTask+0x36>
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <createTask+0x6c>
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <_end+0x301>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	3a 83       	std	Y+2, r19	; 0x02
 3e0:	29 83       	std	Y+1, r18	; 0x01
 3e2:	1c 83       	std	Y+4, r17	; 0x04
 3e4:	0b 83       	std	Y+3, r16	; 0x03
 3e6:	1e 82       	std	Y+6, r1	; 0x06
 3e8:	1d 82       	std	Y+5, r1	; 0x05
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	98 87       	std	Y+8, r25	; 0x08
 3f0:	8f 83       	std	Y+7, r24	; 0x07
 3f2:	ca 01       	movw	r24, r20
 3f4:	00 24       	eor	r0, r0
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	07 94       	ror	r0
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	07 94       	ror	r0
 402:	98 2f       	mov	r25, r24
 404:	80 2d       	mov	r24, r0
 406:	83 5e       	subi	r24, 0xE3	; 227
 408:	9b 4f       	sbci	r25, 0xFB	; 251
 40a:	9a 87       	std	Y+10, r25	; 0x0a
 40c:	89 87       	std	Y+9, r24	; 0x09
 40e:	1c 87       	std	Y+12, r17	; 0x0c
 410:	0b 87       	std	Y+11, r16	; 0x0b
 412:	1e 86       	std	Y+14, r1	; 0x0e
 414:	1d 86       	std	Y+13, r1	; 0x0d
 416:	78 8b       	std	Y+16, r23	; 0x10
 418:	6f 87       	std	Y+15, r22	; 0x0f
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	a8 9f       	mul	r26, r24
 41e:	d0 01       	movw	r26, r0
 420:	11 24       	eor	r1, r1
 422:	a0 50       	subi	r26, 0x00	; 0
 424:	bf 4f       	sbci	r27, 0xFF	; 255
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	fe 01       	movw	r30, r28
 42a:	31 96       	adiw	r30, 0x01	; 1
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <semis+0x24>
 434:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <_end+0x305>
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	86 17       	cp	r24, r22
 43c:	97 07       	cpc	r25, r23
 43e:	10 f0       	brcs	.+4      	; 0x444 <semis+0x3c>
 440:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_end+0x305>
 444:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <_end+0x305>
 448:	ca 01       	movw	r24, r20
 44a:	0e 94 96 01 	call	0x32c	; 0x32c <initStackForTask>
 44e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_end+0x301>
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_end+0x301>
 458:	60 96       	adiw	r28, 0x10	; 16
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <main>:
 46e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <semiphoreSetup>
 472:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <clrRam>
 476:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
 47a:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_end+0x301>
 47e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_end+0x308>
 482:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_end+0x309>
 486:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_end+0x30a>
 48a:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_end+0x30b>
 48e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <_end+0x30c>
 492:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <_end+0x30d>
 496:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <_end+0x30e>
 49a:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_end+0x30f>
 49e:	87 b1       	in	r24, 0x07	; 7
 4a0:	89 60       	ori	r24, 0x09	; 9
 4a2:	87 b9       	out	0x07, r24	; 7
 4a4:	84 b1       	in	r24, 0x04	; 4
 4a6:	8f 62       	ori	r24, 0x2F	; 47
 4a8:	84 b9       	out	0x04, r24	; 4
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	8a b9       	out	0x0a, r24	; 10
 4ae:	6b 9a       	sbi	0x0d, 3	; 13
 4b0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	82 e8       	ldi	r24, 0x82	; 130
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4c0:	60 e1       	ldi	r22, 0x10	; 16
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	88 e5       	ldi	r24, 0x58	; 88
 4c6:	93 e0       	ldi	r25, 0x03	; 3
 4c8:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4cc:	6e e0       	ldi	r22, 0x0E	; 14
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	88 e5       	ldi	r24, 0x58	; 88
 4d2:	93 e0       	ldi	r25, 0x03	; 3
 4d4:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4d8:	6f e0       	ldi	r22, 0x0F	; 15
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	83 ed       	ldi	r24, 0xD3	; 211
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4e4:	6d e0       	ldi	r22, 0x0D	; 13
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	83 ed       	ldi	r24, 0xD3	; 211
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 b6 01 	call	0x36c	; 0x36c <createTask>
 4f0:	0e 94 83 01 	call	0x306	; 0x306 <tickTimerSetup>
 4f4:	0e 94 a2 00 	call	0x144	; 0x144 <LOADSTATE>
 4f8:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 4fc:	8f 5f       	subi	r24, 0xFF	; 255
 4fe:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 502:	fa cf       	rjmp	.-12     	; 0x4f8 <main+0x8a>

00000504 <taskScheduler>:
 504:	c1 e0       	ldi	r28, 0x01	; 1
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	f8 94       	cli
 50a:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>
 50e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 512:	80 31       	cpi	r24, 0x10	; 16
 514:	08 f0       	brcs	.+2      	; 0x518 <taskScheduler+0x14>
 516:	73 c0       	rjmp	.+230    	; 0x5fe <taskScheduler+0xfa>
 518:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_end+0x302>
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	df 01       	movw	r26, r30
 520:	a2 95       	swap	r26
 522:	b2 95       	swap	r27
 524:	b0 7f       	andi	r27, 0xF0	; 240
 526:	ba 27       	eor	r27, r26
 528:	a0 7f       	andi	r26, 0xF0	; 240
 52a:	ba 27       	eor	r27, r26
 52c:	a0 50       	subi	r26, 0x00	; 0
 52e:	bf 4f       	sbci	r27, 0xFF	; 255
 530:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <_end+0x307>
 534:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <_end+0x306>
 538:	15 96       	adiw	r26, 0x05	; 5
 53a:	1c 92       	st	X, r1
 53c:	1e 92       	st	-X, r1
 53e:	14 97       	sbiw	r26, 0x04	; 4
 540:	16 96       	adiw	r26, 0x06	; 6
 542:	8d 91       	ld	r24, X+
 544:	9c 91       	ld	r25, X
 546:	17 97       	sbiw	r26, 0x07	; 7
 548:	02 97       	sbiw	r24, 0x02	; 2
 54a:	c1 f5       	brne	.+112    	; 0x5bc <taskScheduler+0xb8>
 54c:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_end+0x308>
 550:	30 91 09 04 	lds	r19, 0x0409	; 0x800409 <_end+0x309>
 554:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <_end+0x30a>
 558:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <_end+0x30b>
 55c:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <_end+0x30c>
 560:	70 91 0d 04 	lds	r23, 0x040D	; 0x80040d <_end+0x30d>
 564:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_end+0x30e>
 568:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_end+0x30f>
 56c:	df 01       	movw	r26, r30
 56e:	a2 95       	swap	r26
 570:	b2 95       	swap	r27
 572:	b0 7f       	andi	r27, 0xF0	; 240
 574:	ba 27       	eor	r27, r26
 576:	a0 7f       	andi	r26, 0xF0	; 240
 578:	ba 27       	eor	r27, r26
 57a:	a0 50       	subi	r26, 0x00	; 0
 57c:	bf 4f       	sbci	r27, 0xFF	; 255
 57e:	1c 96       	adiw	r26, 0x0c	; 12
 580:	0d 91       	ld	r16, X+
 582:	1c 91       	ld	r17, X
 584:	1d 97       	sbiw	r26, 0x0d	; 13
 586:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__lshrdi3>
 58a:	21 70       	andi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a0 e0       	ldi	r26, 0x00	; 0
 59c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__cmpdi2_s8>
 5a0:	21 f1       	breq	.+72     	; 0x5ea <taskScheduler+0xe6>
 5a2:	e2 95       	swap	r30
 5a4:	f2 95       	swap	r31
 5a6:	f0 7f       	andi	r31, 0xF0	; 240
 5a8:	fe 27       	eor	r31, r30
 5aa:	e0 7f       	andi	r30, 0xF0	; 240
 5ac:	fe 27       	eor	r31, r30
 5ae:	e0 50       	subi	r30, 0x00	; 0
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	15 86       	std	Z+13, r1	; 0x0d
 5b4:	14 86       	std	Z+12, r1	; 0x0c
 5b6:	17 82       	std	Z+7, r1	; 0x07
 5b8:	16 82       	std	Z+6, r1	; 0x06
 5ba:	17 c0       	rjmp	.+46     	; 0x5ea <taskScheduler+0xe6>
 5bc:	e2 95       	swap	r30
 5be:	f2 95       	swap	r31
 5c0:	f0 7f       	andi	r31, 0xF0	; 240
 5c2:	fe 27       	eor	r31, r30
 5c4:	e0 7f       	andi	r30, 0xF0	; 240
 5c6:	fe 27       	eor	r31, r30
 5c8:	e0 50       	subi	r30, 0x00	; 0
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	86 81       	ldd	r24, Z+6	; 0x06
 5ce:	97 81       	ldd	r25, Z+7	; 0x07
 5d0:	89 2b       	or	r24, r25
 5d2:	59 f4       	brne	.+22     	; 0x5ea <taskScheduler+0xe6>
 5d4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 96 01 	call	0x32c	; 0x32c <initStackForTask>
 5de:	e0 91 06 04 	lds	r30, 0x0406	; 0x800406 <_end+0x306>
 5e2:	f0 91 07 04 	lds	r31, 0x0407	; 0x800407 <_end+0x307>
 5e6:	d7 83       	std	Z+7, r29	; 0x07
 5e8:	c6 83       	std	Z+6, r28	; 0x06
 5ea:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 5f4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 5f8:	80 31       	cpi	r24, 0x10	; 16
 5fa:	08 f4       	brcc	.+2      	; 0x5fe <taskScheduler+0xfa>
 5fc:	8d cf       	rjmp	.-230    	; 0x518 <taskScheduler+0x14>
 5fe:	78 94       	sei
 600:	83 cf       	rjmp	.-250    	; 0x508 <taskScheduler+0x4>

00000602 <incrementTask>:
 602:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_end+0x303>
 606:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_end+0x304>
 60a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 614:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 618:	80 31       	cpi	r24, 0x10	; 16
 61a:	90 f5       	brcc	.+100    	; 0x680 <incrementTask+0x7e>
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	dc 01       	movw	r26, r24
 626:	a2 95       	swap	r26
 628:	b2 95       	swap	r27
 62a:	b0 7f       	andi	r27, 0xF0	; 240
 62c:	ba 27       	eor	r27, r26
 62e:	a0 7f       	andi	r26, 0xF0	; 240
 630:	ba 27       	eor	r27, r26
 632:	a0 50       	subi	r26, 0x00	; 0
 634:	bf 4f       	sbci	r27, 0xFF	; 255
 636:	14 96       	adiw	r26, 0x04	; 4
 638:	2d 91       	ld	r18, X+
 63a:	3c 91       	ld	r19, X
 63c:	15 97       	sbiw	r26, 0x05	; 5
 63e:	23 2b       	or	r18, r19
 640:	81 f4       	brne	.+32     	; 0x662 <incrementTask+0x60>
 642:	fd 01       	movw	r30, r26
 644:	46 85       	ldd	r20, Z+14	; 0x0e
 646:	57 85       	ldd	r21, Z+15	; 0x0f
 648:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <_end+0x304>
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	24 17       	cp	r18, r20
 650:	35 07       	cpc	r19, r21
 652:	38 f4       	brcc	.+14     	; 0x662 <incrementTask+0x60>
 654:	60 91 02 04 	lds	r22, 0x0402	; 0x800402 <_end+0x302>
 658:	fd 01       	movw	r30, r26
 65a:	86 85       	ldd	r24, Z+14	; 0x0e
 65c:	97 85       	ldd	r25, Z+15	; 0x0f
 65e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <_end+0x304>
 662:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 66c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 670:	80 31       	cpi	r24, 0x10	; 16
 672:	a8 f2       	brcs	.-86     	; 0x61e <incrementTask+0x1c>
 674:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <_end+0x300>
 678:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <_end+0x307>
 67c:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <_end+0x306>
 680:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_end+0x300>
 684:	80 e1       	ldi	r24, 0x10	; 16
 686:	e8 9f       	mul	r30, r24
 688:	f0 01       	movw	r30, r0
 68a:	11 24       	eor	r1, r1
 68c:	e0 50       	subi	r30, 0x00	; 0
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	95 83       	std	Z+5, r25	; 0x05
 696:	84 83       	std	Z+4, r24	; 0x04
 698:	08 95       	ret

0000069a <yieldReady>:
}

void yieldReady(){
	taskArray[taskCounter].state = READY; 
 69a:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_end+0x300>
 69e:	80 e1       	ldi	r24, 0x10	; 16
 6a0:	e8 9f       	mul	r30, r24
 6a2:	f0 01       	movw	r30, r0
 6a4:	11 24       	eor	r1, r1
 6a6:	e0 50       	subi	r30, 0x00	; 0
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	17 82       	std	Z+7, r1	; 0x07
 6ac:	16 82       	std	Z+6, r1	; 0x06
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <yieldReady+0x14>

000006b0 <blinkyTaskFunction>:
		sei();
	}
}

void blinkyTaskFunction(){
		PORTB |= 1 << 5;
 6b0:	2d 9a       	sbi	0x05, 5	; 5
		yieldReady(); 
 6b2:	0e 94 4d 03 	call	0x69a	; 0x69a <yieldReady>

000006b6 <__ashrdi3>:
 6b6:	97 fb       	bst	r25, 7
 6b8:	10 f8       	bld	r1, 0

000006ba <__lshrdi3>:
 6ba:	16 94       	lsr	r1
 6bc:	00 08       	sbc	r0, r0
 6be:	0f 93       	push	r16
 6c0:	08 30       	cpi	r16, 0x08	; 8
 6c2:	98 f0       	brcs	.+38     	; 0x6ea <__lshrdi3+0x30>
 6c4:	08 50       	subi	r16, 0x08	; 8
 6c6:	23 2f       	mov	r18, r19
 6c8:	34 2f       	mov	r19, r20
 6ca:	45 2f       	mov	r20, r21
 6cc:	56 2f       	mov	r21, r22
 6ce:	67 2f       	mov	r22, r23
 6d0:	78 2f       	mov	r23, r24
 6d2:	89 2f       	mov	r24, r25
 6d4:	90 2d       	mov	r25, r0
 6d6:	f4 cf       	rjmp	.-24     	; 0x6c0 <__lshrdi3+0x6>
 6d8:	05 94       	asr	r0
 6da:	97 95       	ror	r25
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	57 95       	ror	r21
 6e4:	47 95       	ror	r20
 6e6:	37 95       	ror	r19
 6e8:	27 95       	ror	r18
 6ea:	0a 95       	dec	r16
 6ec:	aa f7       	brpl	.-22     	; 0x6d8 <__lshrdi3+0x1e>
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <__cmpdi2_s8>:
 6f2:	00 24       	eor	r0, r0
 6f4:	a7 fd       	sbrc	r26, 7
 6f6:	00 94       	com	r0
 6f8:	2a 17       	cp	r18, r26
 6fa:	30 05       	cpc	r19, r0
 6fc:	40 05       	cpc	r20, r0
 6fe:	50 05       	cpc	r21, r0
 700:	60 05       	cpc	r22, r0
 702:	70 05       	cpc	r23, r0
 704:	80 05       	cpc	r24, r0
 706:	90 05       	cpc	r25, r0
 708:	08 95       	ret

0000070a <_exit>:
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
