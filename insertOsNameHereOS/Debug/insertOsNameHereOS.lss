
insertOsNameHereOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c28  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a20  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000630  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055c  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_42>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  c4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <os>:
 .global LoadSTATE

 .global os
os:

	sbi _SFR_IO_ADDR(PINB), 5
  cc:	1d 9a       	sbi	0x03, 5	; 3
	ret
  ce:	08 95       	ret

000000d0 <yeild>:

.global yeild
yeild:
  JMP yeild ; Spin.  This should do something more usefull later
  d0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <yeild>

000000d4 <__vector_42>:

.global TIMER4_COMPA_vect

TIMER4_COMPA_vect:
  ; save the registers
	IN R1, _SFR_IO_ADDR(SREG); R1 is zero and doesnt need to be saved 
  d4:	1f b6       	in	r1, 0x3f	; 63
	PUSH R31
  d6:	ff 93       	push	r31
	PUSH R30
  d8:	ef 93       	push	r30
	PUSH R29
  da:	df 93       	push	r29
	PUSH R28
  dc:	cf 93       	push	r28
	PUSH R27
  de:	bf 93       	push	r27
	PUSH R26
  e0:	af 93       	push	r26
	PUSH R25
  e2:	9f 93       	push	r25
	PUSH R24
  e4:	8f 93       	push	r24
	PUSH R23
  e6:	7f 93       	push	r23
	PUSH R22
  e8:	6f 93       	push	r22
	PUSH R21
  ea:	5f 93       	push	r21
	PUSH R20
  ec:	4f 93       	push	r20
	PUSH R19
  ee:	3f 93       	push	r19
	PUSH R18
  f0:	2f 93       	push	r18
	PUSH R17
  f2:	1f 93       	push	r17
	PUSH R16
  f4:	0f 93       	push	r16
	PUSH R15
  f6:	ff 92       	push	r15
	PUSH R14
  f8:	ef 92       	push	r14
	PUSH R13
  fa:	df 92       	push	r13
	PUSH R12
  fc:	cf 92       	push	r12
	PUSH R11
  fe:	bf 92       	push	r11
	PUSH R10
 100:	af 92       	push	r10
	PUSH R9
 102:	9f 92       	push	r9
	PUSH R8
 104:	8f 92       	push	r8
	PUSH R7
 106:	7f 92       	push	r7
	PUSH R6
 108:	6f 92       	push	r6
	PUSH R5
 10a:	5f 92       	push	r5
	PUSH R4
 10c:	4f 92       	push	r4
	PUSH R3
 10e:	3f 92       	push	r3
	PUSH R2
 110:	2f 92       	push	r2
	PUSH R1
 112:	1f 92       	push	r1
	PUSH R0
 114:	0f 92       	push	r0

  ; get the Task Counter into R17 and number of tasks into R18
    LDI ZL, TASKCOUNTERADDR_L; load the address of the task counter into the pointer register
 116:	e0 e0       	ldi	r30, 0x00	; 0
    LDI ZH, TASKCOUNTERADDR_H
 118:	f4 e0       	ldi	r31, 0x04	; 4
    LD R17, Z+; get task counter
 11a:	11 91       	ld	r17, Z+
    LD R18, Z; get number of tasks
 11c:	20 81       	ld	r18, Z

  ; get the stack pointer
    IN ZL, _SFR_IO_ADDR(SPL); copy the stack pointer to the Z register
 11e:	ed b7       	in	r30, 0x3d	; 61
    IN ZH, _SFR_IO_ADDR(SPH);
 120:	fe b7       	in	r31, 0x3e	; 62
    PUSH ZH; save the stack pointer
 122:	ff 93       	push	r31
    PUSH ZL
 124:	ef 93       	push	r30


  ; calculate address of current task structure
    LDI R16, 16
 126:	00 e1       	ldi	r16, 0x10	; 16
    MUL R17, R16; multiply task counter by 16 and put the result in R0
 128:	10 9f       	mul	r17, r16
    LDI ZL, STARTOFTASKLIST_L + 8; stack pointer address in task list
 12a:	e8 e0       	ldi	r30, 0x08	; 8
    LDI ZH, STARTOFTASKLIST_H
 12c:	f1 e0       	ldi	r31, 0x01	; 1
    ; task counter to offset
    ADD ZL, R0;
 12e:	e0 0d       	add	r30, r0
    ADC ZH, R1; does a 16bit add correct address now in Z register
 130:	f1 1d       	adc	r31, r1

  ; save stack pointer and program counter to task structure memeory
    POP R0; low byte of SP
 132:	0f 90       	pop	r0
	POP R1; high byte of SP 
 134:	1f 90       	pop	r1
    ST Z+, R0
 136:	01 92       	st	Z+, r0
    ST Z+, R1
 138:	11 92       	st	Z+, r1

   INC R17; increment task counter
 13a:	13 95       	inc	r17
  CP R17, R18
 13c:	12 17       	cp	r17, r18
  BRLO TaskNotOverflowed ; brach if lower
 13e:	08 f0       	brcs	.+2      	; 0x142 <TaskNotOverflowed>
  CLR R17; if taskCounter >= numberOfTasks reset to task 0
 140:	11 27       	eor	r17, r17

00000142 <TaskNotOverflowed>:
  TaskNotOverflowed:
  LDI ZL, TASKCOUNTERADDR_L
 142:	e0 e0       	ldi	r30, 0x00	; 0
  LDI ZH, TASKCOUNTERADDR_H
 144:	f4 e0       	ldi	r31, 0x04	; 4
  ST Z, R17
 146:	10 83       	st	Z, r17

00000148 <LOADSTATE>:

  LOADSTATE:
  ; Load saved state
    ; get saved SP
      LDI R16, 16
 148:	00 e1       	ldi	r16, 0x10	; 16
      MUL R17, R16; multiply task counter by 16 and put the result in R0
 14a:	10 9f       	mul	r17, r16
      LDI ZL, STARTOFTASKLIST_L + 8; program counter address in task list
 14c:	e8 e0       	ldi	r30, 0x08	; 8
      LDI ZH, STARTOFTASKLIST_H
 14e:	f1 e0       	ldi	r31, 0x01	; 1
      ; task counter to offset
      ADD ZL, R0;
 150:	e0 0d       	add	r30, r0
      ADC ZH, R1; does a 16bit add correct address now in Z register
 152:	f1 1d       	adc	r31, r1
      LD R0, Z+; SPL
 154:	01 90       	ld	r0, Z+
      PUSH R0
 156:	0f 92       	push	r0
      LD R0, Z; SPH
 158:	00 80       	ld	r0, Z
      PUSH R0
 15a:	0f 92       	push	r0


    ; restore stack pointer 
      POP R1; SPH
 15c:	1f 90       	pop	r1
      POP R0; SPL
 15e:	0f 90       	pop	r0
      OUT _SFR_IO_ADDR(SPH), R1
 160:	1e be       	out	0x3e, r1	; 62
      OUT _SFR_IO_ADDR(SPL), R0
 162:	0d be       	out	0x3d, r0	; 61
      

	POP R0
 164:	0f 90       	pop	r0
	POP R1
 166:	1f 90       	pop	r1
	OUT _SFR_IO_ADDR(SREG), R1; put the Status register back 
 168:	1f be       	out	0x3f, r1	; 63
	POP R2
 16a:	2f 90       	pop	r2
	POP R3
 16c:	3f 90       	pop	r3
	POP R4
 16e:	4f 90       	pop	r4
	POP R5
 170:	5f 90       	pop	r5
	POP R6
 172:	6f 90       	pop	r6
	POP R7
 174:	7f 90       	pop	r7
	POP R8
 176:	8f 90       	pop	r8
	POP R9
 178:	9f 90       	pop	r9
	POP R10
 17a:	af 90       	pop	r10
	POP R11
 17c:	bf 90       	pop	r11
	POP R12
 17e:	cf 90       	pop	r12
	POP R13
 180:	df 90       	pop	r13
	POP R14
 182:	ef 90       	pop	r14
	POP R15
 184:	ff 90       	pop	r15
	POP R16
 186:	0f 91       	pop	r16
	POP R17
 188:	1f 91       	pop	r17
	POP R18
 18a:	2f 91       	pop	r18
	POP R19
 18c:	3f 91       	pop	r19
	POP R20
 18e:	4f 91       	pop	r20
	POP R21
 190:	5f 91       	pop	r21
	POP R22
 192:	6f 91       	pop	r22
	POP R23
 194:	7f 91       	pop	r23
	POP R24
 196:	8f 91       	pop	r24
	POP R25
 198:	9f 91       	pop	r25
	POP R26
 19a:	af 91       	pop	r26
	POP R27
 19c:	bf 91       	pop	r27
	POP R28
 19e:	cf 91       	pop	r28
	POP R29
 1a0:	df 91       	pop	r29
	POP R30
 1a2:	ef 91       	pop	r30
	POP R31
 1a4:	ff 91       	pop	r31
	CLR R1
 1a6:	11 24       	eor	r1, r1
    ; PC shoudld be on stack

  reti
 1a8:	18 95       	reti

000001aa <blinkyTaskFunction>:
}


void blinkyTaskFunction(){
								while (1) {
																PORTB |= 1 << 5;
 1aa:	2d 9a       	sbi	0x05, 5	; 5
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <blinkyTaskFunction>

000001ae <blinkyTask2Function>:
								}
}
void blinkyTask2Function(){
								while (1) {
																PORTB &= ~(1 << 5);
 1ae:	2d 98       	cbi	0x05, 5	; 5
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <blinkyTask2Function>

000001b2 <clrRam>:
																i++;
								}
}

void clrRam(){
	for(uint16_t* i = 0x100; i < 0x700; i++){
 1b2:	e0 e0       	ldi	r30, 0x00	; 0
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
		*i = 0xAABB;
 1b6:	8b eb       	ldi	r24, 0xBB	; 187
 1b8:	9a ea       	ldi	r25, 0xAA	; 170
 1ba:	81 93       	st	Z+, r24
 1bc:	91 93       	st	Z+, r25
																i++;
								}
}

void clrRam(){
	for(uint16_t* i = 0x100; i < 0x700; i++){
 1be:	e1 15       	cp	r30, r1
 1c0:	27 e0       	ldi	r18, 0x07	; 7
 1c2:	f2 07       	cpc	r31, r18
 1c4:	d1 f7       	brne	.-12     	; 0x1ba <clrRam+0x8>
		*i = 0xAABB;
	}
}
 1c6:	08 95       	ret

000001c8 <tickTimerSetup>:

void tickTimerSetup(){
								TCCR4A = 0;
 1c8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
								// ctc mode		// clk / 8
								TCCR4B = (1 << WGM42) | (0b010 << CS40);
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
								OCR4A = TIMER_TICK_TIME_LOAD_VALUE;
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1da:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
								TIMSK4 = 1 << OCIE4A;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
								TCNT4 = 0;
 1e4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 1e8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 1ec:	08 95       	ret

000001ee <createTask>:
}

void createTask(void (*taskF)(void)){
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	60 97       	sbiw	r28, 0x10	; 16
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
								Task t = taskArray[numberOfTasks]; // get memory for task
 202:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_end+0x301>
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	e2 95       	swap	r30
 20c:	f2 95       	swap	r31
 20e:	f0 7f       	andi	r31, 0xF0	; 240
 210:	fe 27       	eor	r31, r30
 212:	e0 7f       	andi	r30, 0xF0	; 240
 214:	fe 27       	eor	r31, r30
 216:	e0 50       	subi	r30, 0x00	; 0
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	40 e1       	ldi	r20, 0x10	; 16
 21c:	de 01       	movw	r26, r28
 21e:	11 96       	adiw	r26, 0x01	; 1
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	4a 95       	dec	r20
 226:	e1 f7       	brne	.-8      	; 0x220 <createTask+0x32>
								t.placeHolder = 0xAABB; 
								t.placeHolder2 = 0xCCDD; 
								t.placeHolder3 = 0xEEFF; 
								t.state = WAITING;
								t.programCounter = taskF;
								t.stackPointer = 0x043F + 64 * numberOfTasks - 34; 
 228:	b9 01       	movw	r22, r18
 22a:	00 24       	eor	r0, r0
 22c:	76 95       	lsr	r23
 22e:	67 95       	ror	r22
 230:	07 94       	ror	r0
 232:	76 95       	lsr	r23
 234:	67 95       	ror	r22
 236:	07 94       	ror	r0
 238:	76 2f       	mov	r23, r22
 23a:	60 2d       	mov	r22, r0
								
								// sketchy hard coded pointer stuff 
								uint16_t defNotAPtrtoTaskF = taskF; // compilers suck 
								uint8_t* ptrToStackIntial = 0x043F + 64 * numberOfTasks -1;
 23c:	fb 01       	movw	r30, r22
 23e:	e2 5c       	subi	r30, 0xC2	; 194
 240:	fb 4f       	sbci	r31, 0xFB	; 251
								*ptrToStackIntial = defNotAPtrtoTaskF >> 8;
 242:	90 83       	st	Z, r25
								ptrToStackIntial += 1; 
								*ptrToStackIntial = defNotAPtrtoTaskF & 0xFF;
 244:	81 83       	std	Z+1, r24	; 0x01
								

								taskArray[numberOfTasks] = t;
 246:	40 91 01 04 	lds	r20, 0x0401	; 0x800401 <_end+0x301>
 24a:	3a 83       	std	Y+2, r19	; 0x02
 24c:	29 83       	std	Y+1, r18	; 0x01
 24e:	8b 83       	std	Y+3, r24	; 0x03
 250:	9c 83       	std	Y+4, r25	; 0x04
 252:	2b eb       	ldi	r18, 0xBB	; 187
 254:	3a ea       	ldi	r19, 0xAA	; 170
 256:	3e 83       	std	Y+6, r19	; 0x06
 258:	2d 83       	std	Y+5, r18	; 0x05
 25a:	22 e0       	ldi	r18, 0x02	; 2
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	38 87       	std	Y+8, r19	; 0x08
 260:	2f 83       	std	Y+7, r18	; 0x07
 262:	63 5e       	subi	r22, 0xE3	; 227
 264:	7b 4f       	sbci	r23, 0xFB	; 251
 266:	7a 87       	std	Y+10, r23	; 0x0a
 268:	69 87       	std	Y+9, r22	; 0x09
 26a:	8b 87       	std	Y+11, r24	; 0x0b
 26c:	9c 87       	std	Y+12, r25	; 0x0c
 26e:	8d ed       	ldi	r24, 0xDD	; 221
 270:	9c ec       	ldi	r25, 0xCC	; 204
 272:	9e 87       	std	Y+14, r25	; 0x0e
 274:	8d 87       	std	Y+13, r24	; 0x0d
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9e ee       	ldi	r25, 0xEE	; 238
 27a:	98 8b       	std	Y+16, r25	; 0x10
 27c:	8f 87       	std	Y+15, r24	; 0x0f
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	48 9f       	mul	r20, r24
 282:	d0 01       	movw	r26, r0
 284:	11 24       	eor	r1, r1
 286:	a0 50       	subi	r26, 0x00	; 0
 288:	bf 4f       	sbci	r27, 0xFF	; 255
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	fe 01       	movw	r30, r28
 28e:	31 96       	adiw	r30, 0x01	; 1
 290:	01 90       	ld	r0, Z+
 292:	0d 92       	st	X+, r0
 294:	8a 95       	dec	r24
 296:	e1 f7       	brne	.-8      	; 0x290 <createTask+0xa2>

								numberOfTasks++;// increment total number of tasks
 298:	4f 5f       	subi	r20, 0xFF	; 255
 29a:	40 93 01 04 	sts	0x0401, r20	; 0x800401 <_end+0x301>
}
 29e:	60 96       	adiw	r28, 0x10	; 16
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <main>:

volatile uint8_t i __attribute__((address (0x402)));

int main(void)
{
								clrRam();
 2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <clrRam>
								taskCounter = 0;
 2b4:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_end+0x300>
								numberOfTasks = 0;
 2b8:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_end+0x301>
								DDRE |= 1 << 0; // heartbeat pin
 2bc:	68 9a       	sbi	0x0d, 0	; 13
								DDRB |= 1 << 5;
 2be:	25 9a       	sbi	0x04, 5	; 4

								i = 0;
 2c0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_end+0x302>

								

								createTask(blinkyTaskFunction);
 2c4:	85 ed       	ldi	r24, 0xD5	; 213
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <createTask>
								createTask(blinkyTask2Function);
 2cc:	87 ed       	ldi	r24, 0xD7	; 215
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <createTask>

								tickTimerSetup();								
 2d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <tickTimerSetup>
								sei();
 2d8:	78 94       	sei
								
								taskArray[0].taskFunction();
 2da:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_end+0x2>
 2de:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_end+0x3>
 2e2:	09 95       	icall

								/* Replace with your application code */
								while (1)
								{
																i++;
 2e4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_end+0x302>
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_end+0x302>
 2ee:	fa cf       	rjmp	.-12     	; 0x2e4 <main+0x34>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
